// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_define.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_5fdefine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_5fdefine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_5fdefine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_5fdefine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[27]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_5fdefine_2eproto;
namespace ssp {
class AddBlackReq;
struct AddBlackReqDefaultTypeInternal;
extern AddBlackReqDefaultTypeInternal _AddBlackReq_default_instance_;
class AddBlackRsp;
struct AddBlackRspDefaultTypeInternal;
extern AddBlackRspDefaultTypeInternal _AddBlackRsp_default_instance_;
class AddFriendReq;
struct AddFriendReqDefaultTypeInternal;
extern AddFriendReqDefaultTypeInternal _AddFriendReq_default_instance_;
class AddFriendRsp;
struct AddFriendRspDefaultTypeInternal;
extern AddFriendRspDefaultTypeInternal _AddFriendRsp_default_instance_;
class DelBlackReq;
struct DelBlackReqDefaultTypeInternal;
extern DelBlackReqDefaultTypeInternal _DelBlackReq_default_instance_;
class DelBlackRsp;
struct DelBlackRspDefaultTypeInternal;
extern DelBlackRspDefaultTypeInternal _DelBlackRsp_default_instance_;
class DelFriendReq;
struct DelFriendReqDefaultTypeInternal;
extern DelFriendReqDefaultTypeInternal _DelFriendReq_default_instance_;
class DelFriendRsp;
struct DelFriendRspDefaultTypeInternal;
extern DelFriendRspDefaultTypeInternal _DelFriendRsp_default_instance_;
class DeleteMessageReq;
struct DeleteMessageReqDefaultTypeInternal;
extern DeleteMessageReqDefaultTypeInternal _DeleteMessageReq_default_instance_;
class DeleteMessageRsp;
struct DeleteMessageRspDefaultTypeInternal;
extern DeleteMessageRspDefaultTypeInternal _DeleteMessageRsp_default_instance_;
class DeleteUserReq;
struct DeleteUserReqDefaultTypeInternal;
extern DeleteUserReqDefaultTypeInternal _DeleteUserReq_default_instance_;
class DeleteUserRsp;
struct DeleteUserRspDefaultTypeInternal;
extern DeleteUserRspDefaultTypeInternal _DeleteUserRsp_default_instance_;
class GetMessageReq;
struct GetMessageReqDefaultTypeInternal;
extern GetMessageReqDefaultTypeInternal _GetMessageReq_default_instance_;
class GetMessageRsp;
struct GetMessageRspDefaultTypeInternal;
extern GetMessageRspDefaultTypeInternal _GetMessageRsp_default_instance_;
class GetPhotoReq;
struct GetPhotoReqDefaultTypeInternal;
extern GetPhotoReqDefaultTypeInternal _GetPhotoReq_default_instance_;
class GetPhotoRsp;
struct GetPhotoRspDefaultTypeInternal;
extern GetPhotoRspDefaultTypeInternal _GetPhotoRsp_default_instance_;
class LoginReq;
struct LoginReqDefaultTypeInternal;
extern LoginReqDefaultTypeInternal _LoginReq_default_instance_;
class LoginRsp;
struct LoginRspDefaultTypeInternal;
extern LoginRspDefaultTypeInternal _LoginRsp_default_instance_;
class LogoutReq;
struct LogoutReqDefaultTypeInternal;
extern LogoutReqDefaultTypeInternal _LogoutReq_default_instance_;
class LogoutRsp;
struct LogoutRspDefaultTypeInternal;
extern LogoutRspDefaultTypeInternal _LogoutRsp_default_instance_;
class MessageBase;
struct MessageBaseDefaultTypeInternal;
extern MessageBaseDefaultTypeInternal _MessageBase_default_instance_;
class PublishMessageReq;
struct PublishMessageReqDefaultTypeInternal;
extern PublishMessageReqDefaultTypeInternal _PublishMessageReq_default_instance_;
class PublishMessageRsp;
struct PublishMessageRspDefaultTypeInternal;
extern PublishMessageRspDefaultTypeInternal _PublishMessageRsp_default_instance_;
class RegReq;
struct RegReqDefaultTypeInternal;
extern RegReqDefaultTypeInternal _RegReq_default_instance_;
class RegRsp;
struct RegRspDefaultTypeInternal;
extern RegRspDefaultTypeInternal _RegRsp_default_instance_;
class ReqInfoBase;
struct ReqInfoBaseDefaultTypeInternal;
extern ReqInfoBaseDefaultTypeInternal _ReqInfoBase_default_instance_;
class RspInfoBase;
struct RspInfoBaseDefaultTypeInternal;
extern RspInfoBaseDefaultTypeInternal _RspInfoBase_default_instance_;
}  // namespace ssp
PROTOBUF_NAMESPACE_OPEN
template<> ::ssp::AddBlackReq* Arena::CreateMaybeMessage<::ssp::AddBlackReq>(Arena*);
template<> ::ssp::AddBlackRsp* Arena::CreateMaybeMessage<::ssp::AddBlackRsp>(Arena*);
template<> ::ssp::AddFriendReq* Arena::CreateMaybeMessage<::ssp::AddFriendReq>(Arena*);
template<> ::ssp::AddFriendRsp* Arena::CreateMaybeMessage<::ssp::AddFriendRsp>(Arena*);
template<> ::ssp::DelBlackReq* Arena::CreateMaybeMessage<::ssp::DelBlackReq>(Arena*);
template<> ::ssp::DelBlackRsp* Arena::CreateMaybeMessage<::ssp::DelBlackRsp>(Arena*);
template<> ::ssp::DelFriendReq* Arena::CreateMaybeMessage<::ssp::DelFriendReq>(Arena*);
template<> ::ssp::DelFriendRsp* Arena::CreateMaybeMessage<::ssp::DelFriendRsp>(Arena*);
template<> ::ssp::DeleteMessageReq* Arena::CreateMaybeMessage<::ssp::DeleteMessageReq>(Arena*);
template<> ::ssp::DeleteMessageRsp* Arena::CreateMaybeMessage<::ssp::DeleteMessageRsp>(Arena*);
template<> ::ssp::DeleteUserReq* Arena::CreateMaybeMessage<::ssp::DeleteUserReq>(Arena*);
template<> ::ssp::DeleteUserRsp* Arena::CreateMaybeMessage<::ssp::DeleteUserRsp>(Arena*);
template<> ::ssp::GetMessageReq* Arena::CreateMaybeMessage<::ssp::GetMessageReq>(Arena*);
template<> ::ssp::GetMessageRsp* Arena::CreateMaybeMessage<::ssp::GetMessageRsp>(Arena*);
template<> ::ssp::GetPhotoReq* Arena::CreateMaybeMessage<::ssp::GetPhotoReq>(Arena*);
template<> ::ssp::GetPhotoRsp* Arena::CreateMaybeMessage<::ssp::GetPhotoRsp>(Arena*);
template<> ::ssp::LoginReq* Arena::CreateMaybeMessage<::ssp::LoginReq>(Arena*);
template<> ::ssp::LoginRsp* Arena::CreateMaybeMessage<::ssp::LoginRsp>(Arena*);
template<> ::ssp::LogoutReq* Arena::CreateMaybeMessage<::ssp::LogoutReq>(Arena*);
template<> ::ssp::LogoutRsp* Arena::CreateMaybeMessage<::ssp::LogoutRsp>(Arena*);
template<> ::ssp::MessageBase* Arena::CreateMaybeMessage<::ssp::MessageBase>(Arena*);
template<> ::ssp::PublishMessageReq* Arena::CreateMaybeMessage<::ssp::PublishMessageReq>(Arena*);
template<> ::ssp::PublishMessageRsp* Arena::CreateMaybeMessage<::ssp::PublishMessageRsp>(Arena*);
template<> ::ssp::RegReq* Arena::CreateMaybeMessage<::ssp::RegReq>(Arena*);
template<> ::ssp::RegRsp* Arena::CreateMaybeMessage<::ssp::RegRsp>(Arena*);
template<> ::ssp::ReqInfoBase* Arena::CreateMaybeMessage<::ssp::ReqInfoBase>(Arena*);
template<> ::ssp::RspInfoBase* Arena::CreateMaybeMessage<::ssp::RspInfoBase>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ssp {

// ===================================================================

class ReqInfoBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.ReqInfoBase) */ {
 public:
  inline ReqInfoBase() : ReqInfoBase(nullptr) {}
  ~ReqInfoBase() override;
  explicit constexpr ReqInfoBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqInfoBase(const ReqInfoBase& from);
  ReqInfoBase(ReqInfoBase&& from) noexcept
    : ReqInfoBase() {
    *this = ::std::move(from);
  }

  inline ReqInfoBase& operator=(const ReqInfoBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqInfoBase& operator=(ReqInfoBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqInfoBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqInfoBase* internal_default_instance() {
    return reinterpret_cast<const ReqInfoBase*>(
               &_ReqInfoBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqInfoBase& a, ReqInfoBase& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqInfoBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqInfoBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReqInfoBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReqInfoBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReqInfoBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReqInfoBase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqInfoBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.ReqInfoBase";
  }
  protected:
  explicit ReqInfoBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegReqFieldNumber = 3,
    kLoginReqFieldNumber = 4,
    kLogoutReqFieldNumber = 5,
    kGetMessReqFieldNumber = 6,
    kPublishMessReqFieldNumber = 7,
    kAddFriendReqFieldNumber = 8,
    kAddBlackReqFieldNumber = 9,
    kDelFriendReqFieldNumber = 10,
    kDelBlackReqFieldNumber = 11,
    kGetPhotoReqFieldNumber = 12,
    kDeleteMessReqFieldNumber = 13,
    kDeleteUserReqFieldNumber = 14,
    kVerFieldNumber = 1,
    kMessTypeFieldNumber = 2,
  };
  // optional .ssp.RegReq reg_req = 3;
  bool has_reg_req() const;
  private:
  bool _internal_has_reg_req() const;
  public:
  void clear_reg_req();
  const ::ssp::RegReq& reg_req() const;
  PROTOBUF_NODISCARD ::ssp::RegReq* release_reg_req();
  ::ssp::RegReq* mutable_reg_req();
  void set_allocated_reg_req(::ssp::RegReq* reg_req);
  private:
  const ::ssp::RegReq& _internal_reg_req() const;
  ::ssp::RegReq* _internal_mutable_reg_req();
  public:
  void unsafe_arena_set_allocated_reg_req(
      ::ssp::RegReq* reg_req);
  ::ssp::RegReq* unsafe_arena_release_reg_req();

  // optional .ssp.LoginReq login_req = 4;
  bool has_login_req() const;
  private:
  bool _internal_has_login_req() const;
  public:
  void clear_login_req();
  const ::ssp::LoginReq& login_req() const;
  PROTOBUF_NODISCARD ::ssp::LoginReq* release_login_req();
  ::ssp::LoginReq* mutable_login_req();
  void set_allocated_login_req(::ssp::LoginReq* login_req);
  private:
  const ::ssp::LoginReq& _internal_login_req() const;
  ::ssp::LoginReq* _internal_mutable_login_req();
  public:
  void unsafe_arena_set_allocated_login_req(
      ::ssp::LoginReq* login_req);
  ::ssp::LoginReq* unsafe_arena_release_login_req();

  // optional .ssp.LogoutReq logout_req = 5;
  bool has_logout_req() const;
  private:
  bool _internal_has_logout_req() const;
  public:
  void clear_logout_req();
  const ::ssp::LogoutReq& logout_req() const;
  PROTOBUF_NODISCARD ::ssp::LogoutReq* release_logout_req();
  ::ssp::LogoutReq* mutable_logout_req();
  void set_allocated_logout_req(::ssp::LogoutReq* logout_req);
  private:
  const ::ssp::LogoutReq& _internal_logout_req() const;
  ::ssp::LogoutReq* _internal_mutable_logout_req();
  public:
  void unsafe_arena_set_allocated_logout_req(
      ::ssp::LogoutReq* logout_req);
  ::ssp::LogoutReq* unsafe_arena_release_logout_req();

  // optional .ssp.GetMessageReq get_mess_req = 6;
  bool has_get_mess_req() const;
  private:
  bool _internal_has_get_mess_req() const;
  public:
  void clear_get_mess_req();
  const ::ssp::GetMessageReq& get_mess_req() const;
  PROTOBUF_NODISCARD ::ssp::GetMessageReq* release_get_mess_req();
  ::ssp::GetMessageReq* mutable_get_mess_req();
  void set_allocated_get_mess_req(::ssp::GetMessageReq* get_mess_req);
  private:
  const ::ssp::GetMessageReq& _internal_get_mess_req() const;
  ::ssp::GetMessageReq* _internal_mutable_get_mess_req();
  public:
  void unsafe_arena_set_allocated_get_mess_req(
      ::ssp::GetMessageReq* get_mess_req);
  ::ssp::GetMessageReq* unsafe_arena_release_get_mess_req();

  // optional .ssp.PublishMessageReq publish_mess_req = 7;
  bool has_publish_mess_req() const;
  private:
  bool _internal_has_publish_mess_req() const;
  public:
  void clear_publish_mess_req();
  const ::ssp::PublishMessageReq& publish_mess_req() const;
  PROTOBUF_NODISCARD ::ssp::PublishMessageReq* release_publish_mess_req();
  ::ssp::PublishMessageReq* mutable_publish_mess_req();
  void set_allocated_publish_mess_req(::ssp::PublishMessageReq* publish_mess_req);
  private:
  const ::ssp::PublishMessageReq& _internal_publish_mess_req() const;
  ::ssp::PublishMessageReq* _internal_mutable_publish_mess_req();
  public:
  void unsafe_arena_set_allocated_publish_mess_req(
      ::ssp::PublishMessageReq* publish_mess_req);
  ::ssp::PublishMessageReq* unsafe_arena_release_publish_mess_req();

  // optional .ssp.AddFriendReq add_friend_req = 8;
  bool has_add_friend_req() const;
  private:
  bool _internal_has_add_friend_req() const;
  public:
  void clear_add_friend_req();
  const ::ssp::AddFriendReq& add_friend_req() const;
  PROTOBUF_NODISCARD ::ssp::AddFriendReq* release_add_friend_req();
  ::ssp::AddFriendReq* mutable_add_friend_req();
  void set_allocated_add_friend_req(::ssp::AddFriendReq* add_friend_req);
  private:
  const ::ssp::AddFriendReq& _internal_add_friend_req() const;
  ::ssp::AddFriendReq* _internal_mutable_add_friend_req();
  public:
  void unsafe_arena_set_allocated_add_friend_req(
      ::ssp::AddFriendReq* add_friend_req);
  ::ssp::AddFriendReq* unsafe_arena_release_add_friend_req();

  // optional .ssp.AddBlackReq add_black_req = 9;
  bool has_add_black_req() const;
  private:
  bool _internal_has_add_black_req() const;
  public:
  void clear_add_black_req();
  const ::ssp::AddBlackReq& add_black_req() const;
  PROTOBUF_NODISCARD ::ssp::AddBlackReq* release_add_black_req();
  ::ssp::AddBlackReq* mutable_add_black_req();
  void set_allocated_add_black_req(::ssp::AddBlackReq* add_black_req);
  private:
  const ::ssp::AddBlackReq& _internal_add_black_req() const;
  ::ssp::AddBlackReq* _internal_mutable_add_black_req();
  public:
  void unsafe_arena_set_allocated_add_black_req(
      ::ssp::AddBlackReq* add_black_req);
  ::ssp::AddBlackReq* unsafe_arena_release_add_black_req();

  // optional .ssp.DelFriendReq del_friend_req = 10;
  bool has_del_friend_req() const;
  private:
  bool _internal_has_del_friend_req() const;
  public:
  void clear_del_friend_req();
  const ::ssp::DelFriendReq& del_friend_req() const;
  PROTOBUF_NODISCARD ::ssp::DelFriendReq* release_del_friend_req();
  ::ssp::DelFriendReq* mutable_del_friend_req();
  void set_allocated_del_friend_req(::ssp::DelFriendReq* del_friend_req);
  private:
  const ::ssp::DelFriendReq& _internal_del_friend_req() const;
  ::ssp::DelFriendReq* _internal_mutable_del_friend_req();
  public:
  void unsafe_arena_set_allocated_del_friend_req(
      ::ssp::DelFriendReq* del_friend_req);
  ::ssp::DelFriendReq* unsafe_arena_release_del_friend_req();

  // optional .ssp.DelBlackReq del_black_req = 11;
  bool has_del_black_req() const;
  private:
  bool _internal_has_del_black_req() const;
  public:
  void clear_del_black_req();
  const ::ssp::DelBlackReq& del_black_req() const;
  PROTOBUF_NODISCARD ::ssp::DelBlackReq* release_del_black_req();
  ::ssp::DelBlackReq* mutable_del_black_req();
  void set_allocated_del_black_req(::ssp::DelBlackReq* del_black_req);
  private:
  const ::ssp::DelBlackReq& _internal_del_black_req() const;
  ::ssp::DelBlackReq* _internal_mutable_del_black_req();
  public:
  void unsafe_arena_set_allocated_del_black_req(
      ::ssp::DelBlackReq* del_black_req);
  ::ssp::DelBlackReq* unsafe_arena_release_del_black_req();

  // optional .ssp.GetPhotoReq get_photo_req = 12;
  bool has_get_photo_req() const;
  private:
  bool _internal_has_get_photo_req() const;
  public:
  void clear_get_photo_req();
  const ::ssp::GetPhotoReq& get_photo_req() const;
  PROTOBUF_NODISCARD ::ssp::GetPhotoReq* release_get_photo_req();
  ::ssp::GetPhotoReq* mutable_get_photo_req();
  void set_allocated_get_photo_req(::ssp::GetPhotoReq* get_photo_req);
  private:
  const ::ssp::GetPhotoReq& _internal_get_photo_req() const;
  ::ssp::GetPhotoReq* _internal_mutable_get_photo_req();
  public:
  void unsafe_arena_set_allocated_get_photo_req(
      ::ssp::GetPhotoReq* get_photo_req);
  ::ssp::GetPhotoReq* unsafe_arena_release_get_photo_req();

  // optional .ssp.DeleteMessageReq delete_mess_req = 13;
  bool has_delete_mess_req() const;
  private:
  bool _internal_has_delete_mess_req() const;
  public:
  void clear_delete_mess_req();
  const ::ssp::DeleteMessageReq& delete_mess_req() const;
  PROTOBUF_NODISCARD ::ssp::DeleteMessageReq* release_delete_mess_req();
  ::ssp::DeleteMessageReq* mutable_delete_mess_req();
  void set_allocated_delete_mess_req(::ssp::DeleteMessageReq* delete_mess_req);
  private:
  const ::ssp::DeleteMessageReq& _internal_delete_mess_req() const;
  ::ssp::DeleteMessageReq* _internal_mutable_delete_mess_req();
  public:
  void unsafe_arena_set_allocated_delete_mess_req(
      ::ssp::DeleteMessageReq* delete_mess_req);
  ::ssp::DeleteMessageReq* unsafe_arena_release_delete_mess_req();

  // optional .ssp.DeleteUserReq delete_user_req = 14;
  bool has_delete_user_req() const;
  private:
  bool _internal_has_delete_user_req() const;
  public:
  void clear_delete_user_req();
  const ::ssp::DeleteUserReq& delete_user_req() const;
  PROTOBUF_NODISCARD ::ssp::DeleteUserReq* release_delete_user_req();
  ::ssp::DeleteUserReq* mutable_delete_user_req();
  void set_allocated_delete_user_req(::ssp::DeleteUserReq* delete_user_req);
  private:
  const ::ssp::DeleteUserReq& _internal_delete_user_req() const;
  ::ssp::DeleteUserReq* _internal_mutable_delete_user_req();
  public:
  void unsafe_arena_set_allocated_delete_user_req(
      ::ssp::DeleteUserReq* delete_user_req);
  ::ssp::DeleteUserReq* unsafe_arena_release_delete_user_req();

  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 mess_type = 2;
  bool has_mess_type() const;
  private:
  bool _internal_has_mess_type() const;
  public:
  void clear_mess_type();
  int32_t mess_type() const;
  void set_mess_type(int32_t value);
  private:
  int32_t _internal_mess_type() const;
  void _internal_set_mess_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.ReqInfoBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ssp::RegReq* reg_req_;
  ::ssp::LoginReq* login_req_;
  ::ssp::LogoutReq* logout_req_;
  ::ssp::GetMessageReq* get_mess_req_;
  ::ssp::PublishMessageReq* publish_mess_req_;
  ::ssp::AddFriendReq* add_friend_req_;
  ::ssp::AddBlackReq* add_black_req_;
  ::ssp::DelFriendReq* del_friend_req_;
  ::ssp::DelBlackReq* del_black_req_;
  ::ssp::GetPhotoReq* get_photo_req_;
  ::ssp::DeleteMessageReq* delete_mess_req_;
  ::ssp::DeleteUserReq* delete_user_req_;
  int32_t ver_;
  int32_t mess_type_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class RspInfoBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.RspInfoBase) */ {
 public:
  inline RspInfoBase() : RspInfoBase(nullptr) {}
  ~RspInfoBase() override;
  explicit constexpr RspInfoBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RspInfoBase(const RspInfoBase& from);
  RspInfoBase(RspInfoBase&& from) noexcept
    : RspInfoBase() {
    *this = ::std::move(from);
  }

  inline RspInfoBase& operator=(const RspInfoBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline RspInfoBase& operator=(RspInfoBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RspInfoBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const RspInfoBase* internal_default_instance() {
    return reinterpret_cast<const RspInfoBase*>(
               &_RspInfoBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RspInfoBase& a, RspInfoBase& b) {
    a.Swap(&b);
  }
  inline void Swap(RspInfoBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RspInfoBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RspInfoBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RspInfoBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RspInfoBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RspInfoBase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RspInfoBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.RspInfoBase";
  }
  protected:
  explicit RspInfoBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRegRspFieldNumber = 3,
    kLoginRspFieldNumber = 4,
    kLogoutRspFieldNumber = 5,
    kGetMessRspFieldNumber = 6,
    kPublishMessRspFieldNumber = 7,
    kAddFriendRspFieldNumber = 8,
    kAddBlackRspFieldNumber = 9,
    kDelFriendRspFieldNumber = 10,
    kDelBlackRspFieldNumber = 11,
    kGetPhotoRspFieldNumber = 12,
    kDeleteMessRspFieldNumber = 13,
    kDeleteUserRspFieldNumber = 14,
    kVerFieldNumber = 1,
    kMessTypeFieldNumber = 2,
  };
  // optional .ssp.RegRsp reg_rsp = 3;
  bool has_reg_rsp() const;
  private:
  bool _internal_has_reg_rsp() const;
  public:
  void clear_reg_rsp();
  const ::ssp::RegRsp& reg_rsp() const;
  PROTOBUF_NODISCARD ::ssp::RegRsp* release_reg_rsp();
  ::ssp::RegRsp* mutable_reg_rsp();
  void set_allocated_reg_rsp(::ssp::RegRsp* reg_rsp);
  private:
  const ::ssp::RegRsp& _internal_reg_rsp() const;
  ::ssp::RegRsp* _internal_mutable_reg_rsp();
  public:
  void unsafe_arena_set_allocated_reg_rsp(
      ::ssp::RegRsp* reg_rsp);
  ::ssp::RegRsp* unsafe_arena_release_reg_rsp();

  // optional .ssp.LoginRsp login_rsp = 4;
  bool has_login_rsp() const;
  private:
  bool _internal_has_login_rsp() const;
  public:
  void clear_login_rsp();
  const ::ssp::LoginRsp& login_rsp() const;
  PROTOBUF_NODISCARD ::ssp::LoginRsp* release_login_rsp();
  ::ssp::LoginRsp* mutable_login_rsp();
  void set_allocated_login_rsp(::ssp::LoginRsp* login_rsp);
  private:
  const ::ssp::LoginRsp& _internal_login_rsp() const;
  ::ssp::LoginRsp* _internal_mutable_login_rsp();
  public:
  void unsafe_arena_set_allocated_login_rsp(
      ::ssp::LoginRsp* login_rsp);
  ::ssp::LoginRsp* unsafe_arena_release_login_rsp();

  // optional .ssp.LogoutRsp logout_rsp = 5;
  bool has_logout_rsp() const;
  private:
  bool _internal_has_logout_rsp() const;
  public:
  void clear_logout_rsp();
  const ::ssp::LogoutRsp& logout_rsp() const;
  PROTOBUF_NODISCARD ::ssp::LogoutRsp* release_logout_rsp();
  ::ssp::LogoutRsp* mutable_logout_rsp();
  void set_allocated_logout_rsp(::ssp::LogoutRsp* logout_rsp);
  private:
  const ::ssp::LogoutRsp& _internal_logout_rsp() const;
  ::ssp::LogoutRsp* _internal_mutable_logout_rsp();
  public:
  void unsafe_arena_set_allocated_logout_rsp(
      ::ssp::LogoutRsp* logout_rsp);
  ::ssp::LogoutRsp* unsafe_arena_release_logout_rsp();

  // optional .ssp.GetMessageRsp get_mess_rsp = 6;
  bool has_get_mess_rsp() const;
  private:
  bool _internal_has_get_mess_rsp() const;
  public:
  void clear_get_mess_rsp();
  const ::ssp::GetMessageRsp& get_mess_rsp() const;
  PROTOBUF_NODISCARD ::ssp::GetMessageRsp* release_get_mess_rsp();
  ::ssp::GetMessageRsp* mutable_get_mess_rsp();
  void set_allocated_get_mess_rsp(::ssp::GetMessageRsp* get_mess_rsp);
  private:
  const ::ssp::GetMessageRsp& _internal_get_mess_rsp() const;
  ::ssp::GetMessageRsp* _internal_mutable_get_mess_rsp();
  public:
  void unsafe_arena_set_allocated_get_mess_rsp(
      ::ssp::GetMessageRsp* get_mess_rsp);
  ::ssp::GetMessageRsp* unsafe_arena_release_get_mess_rsp();

  // optional .ssp.PublishMessageRsp publish_mess_rsp = 7;
  bool has_publish_mess_rsp() const;
  private:
  bool _internal_has_publish_mess_rsp() const;
  public:
  void clear_publish_mess_rsp();
  const ::ssp::PublishMessageRsp& publish_mess_rsp() const;
  PROTOBUF_NODISCARD ::ssp::PublishMessageRsp* release_publish_mess_rsp();
  ::ssp::PublishMessageRsp* mutable_publish_mess_rsp();
  void set_allocated_publish_mess_rsp(::ssp::PublishMessageRsp* publish_mess_rsp);
  private:
  const ::ssp::PublishMessageRsp& _internal_publish_mess_rsp() const;
  ::ssp::PublishMessageRsp* _internal_mutable_publish_mess_rsp();
  public:
  void unsafe_arena_set_allocated_publish_mess_rsp(
      ::ssp::PublishMessageRsp* publish_mess_rsp);
  ::ssp::PublishMessageRsp* unsafe_arena_release_publish_mess_rsp();

  // optional .ssp.AddFriendRsp add_friend_rsp = 8;
  bool has_add_friend_rsp() const;
  private:
  bool _internal_has_add_friend_rsp() const;
  public:
  void clear_add_friend_rsp();
  const ::ssp::AddFriendRsp& add_friend_rsp() const;
  PROTOBUF_NODISCARD ::ssp::AddFriendRsp* release_add_friend_rsp();
  ::ssp::AddFriendRsp* mutable_add_friend_rsp();
  void set_allocated_add_friend_rsp(::ssp::AddFriendRsp* add_friend_rsp);
  private:
  const ::ssp::AddFriendRsp& _internal_add_friend_rsp() const;
  ::ssp::AddFriendRsp* _internal_mutable_add_friend_rsp();
  public:
  void unsafe_arena_set_allocated_add_friend_rsp(
      ::ssp::AddFriendRsp* add_friend_rsp);
  ::ssp::AddFriendRsp* unsafe_arena_release_add_friend_rsp();

  // optional .ssp.AddBlackRsp add_black_rsp = 9;
  bool has_add_black_rsp() const;
  private:
  bool _internal_has_add_black_rsp() const;
  public:
  void clear_add_black_rsp();
  const ::ssp::AddBlackRsp& add_black_rsp() const;
  PROTOBUF_NODISCARD ::ssp::AddBlackRsp* release_add_black_rsp();
  ::ssp::AddBlackRsp* mutable_add_black_rsp();
  void set_allocated_add_black_rsp(::ssp::AddBlackRsp* add_black_rsp);
  private:
  const ::ssp::AddBlackRsp& _internal_add_black_rsp() const;
  ::ssp::AddBlackRsp* _internal_mutable_add_black_rsp();
  public:
  void unsafe_arena_set_allocated_add_black_rsp(
      ::ssp::AddBlackRsp* add_black_rsp);
  ::ssp::AddBlackRsp* unsafe_arena_release_add_black_rsp();

  // optional .ssp.DelFriendRsp del_friend_rsp = 10;
  bool has_del_friend_rsp() const;
  private:
  bool _internal_has_del_friend_rsp() const;
  public:
  void clear_del_friend_rsp();
  const ::ssp::DelFriendRsp& del_friend_rsp() const;
  PROTOBUF_NODISCARD ::ssp::DelFriendRsp* release_del_friend_rsp();
  ::ssp::DelFriendRsp* mutable_del_friend_rsp();
  void set_allocated_del_friend_rsp(::ssp::DelFriendRsp* del_friend_rsp);
  private:
  const ::ssp::DelFriendRsp& _internal_del_friend_rsp() const;
  ::ssp::DelFriendRsp* _internal_mutable_del_friend_rsp();
  public:
  void unsafe_arena_set_allocated_del_friend_rsp(
      ::ssp::DelFriendRsp* del_friend_rsp);
  ::ssp::DelFriendRsp* unsafe_arena_release_del_friend_rsp();

  // optional .ssp.DelBlackRsp del_black_rsp = 11;
  bool has_del_black_rsp() const;
  private:
  bool _internal_has_del_black_rsp() const;
  public:
  void clear_del_black_rsp();
  const ::ssp::DelBlackRsp& del_black_rsp() const;
  PROTOBUF_NODISCARD ::ssp::DelBlackRsp* release_del_black_rsp();
  ::ssp::DelBlackRsp* mutable_del_black_rsp();
  void set_allocated_del_black_rsp(::ssp::DelBlackRsp* del_black_rsp);
  private:
  const ::ssp::DelBlackRsp& _internal_del_black_rsp() const;
  ::ssp::DelBlackRsp* _internal_mutable_del_black_rsp();
  public:
  void unsafe_arena_set_allocated_del_black_rsp(
      ::ssp::DelBlackRsp* del_black_rsp);
  ::ssp::DelBlackRsp* unsafe_arena_release_del_black_rsp();

  // optional .ssp.GetPhotoRsp get_photo_rsp = 12;
  bool has_get_photo_rsp() const;
  private:
  bool _internal_has_get_photo_rsp() const;
  public:
  void clear_get_photo_rsp();
  const ::ssp::GetPhotoRsp& get_photo_rsp() const;
  PROTOBUF_NODISCARD ::ssp::GetPhotoRsp* release_get_photo_rsp();
  ::ssp::GetPhotoRsp* mutable_get_photo_rsp();
  void set_allocated_get_photo_rsp(::ssp::GetPhotoRsp* get_photo_rsp);
  private:
  const ::ssp::GetPhotoRsp& _internal_get_photo_rsp() const;
  ::ssp::GetPhotoRsp* _internal_mutable_get_photo_rsp();
  public:
  void unsafe_arena_set_allocated_get_photo_rsp(
      ::ssp::GetPhotoRsp* get_photo_rsp);
  ::ssp::GetPhotoRsp* unsafe_arena_release_get_photo_rsp();

  // optional .ssp.DeleteMessageRsp delete_mess_rsp = 13;
  bool has_delete_mess_rsp() const;
  private:
  bool _internal_has_delete_mess_rsp() const;
  public:
  void clear_delete_mess_rsp();
  const ::ssp::DeleteMessageRsp& delete_mess_rsp() const;
  PROTOBUF_NODISCARD ::ssp::DeleteMessageRsp* release_delete_mess_rsp();
  ::ssp::DeleteMessageRsp* mutable_delete_mess_rsp();
  void set_allocated_delete_mess_rsp(::ssp::DeleteMessageRsp* delete_mess_rsp);
  private:
  const ::ssp::DeleteMessageRsp& _internal_delete_mess_rsp() const;
  ::ssp::DeleteMessageRsp* _internal_mutable_delete_mess_rsp();
  public:
  void unsafe_arena_set_allocated_delete_mess_rsp(
      ::ssp::DeleteMessageRsp* delete_mess_rsp);
  ::ssp::DeleteMessageRsp* unsafe_arena_release_delete_mess_rsp();

  // optional .ssp.DeleteUserRsp delete_user_rsp = 14;
  bool has_delete_user_rsp() const;
  private:
  bool _internal_has_delete_user_rsp() const;
  public:
  void clear_delete_user_rsp();
  const ::ssp::DeleteUserRsp& delete_user_rsp() const;
  PROTOBUF_NODISCARD ::ssp::DeleteUserRsp* release_delete_user_rsp();
  ::ssp::DeleteUserRsp* mutable_delete_user_rsp();
  void set_allocated_delete_user_rsp(::ssp::DeleteUserRsp* delete_user_rsp);
  private:
  const ::ssp::DeleteUserRsp& _internal_delete_user_rsp() const;
  ::ssp::DeleteUserRsp* _internal_mutable_delete_user_rsp();
  public:
  void unsafe_arena_set_allocated_delete_user_rsp(
      ::ssp::DeleteUserRsp* delete_user_rsp);
  ::ssp::DeleteUserRsp* unsafe_arena_release_delete_user_rsp();

  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 mess_type = 2;
  bool has_mess_type() const;
  private:
  bool _internal_has_mess_type() const;
  public:
  void clear_mess_type();
  int32_t mess_type() const;
  void set_mess_type(int32_t value);
  private:
  int32_t _internal_mess_type() const;
  void _internal_set_mess_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.RspInfoBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ssp::RegRsp* reg_rsp_;
  ::ssp::LoginRsp* login_rsp_;
  ::ssp::LogoutRsp* logout_rsp_;
  ::ssp::GetMessageRsp* get_mess_rsp_;
  ::ssp::PublishMessageRsp* publish_mess_rsp_;
  ::ssp::AddFriendRsp* add_friend_rsp_;
  ::ssp::AddBlackRsp* add_black_rsp_;
  ::ssp::DelFriendRsp* del_friend_rsp_;
  ::ssp::DelBlackRsp* del_black_rsp_;
  ::ssp::GetPhotoRsp* get_photo_rsp_;
  ::ssp::DeleteMessageRsp* delete_mess_rsp_;
  ::ssp::DeleteUserRsp* delete_user_rsp_;
  int32_t ver_;
  int32_t mess_type_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class RegReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.RegReq) */ {
 public:
  inline RegReq() : RegReq(nullptr) {}
  ~RegReq() override;
  explicit constexpr RegReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegReq(const RegReq& from);
  RegReq(RegReq&& from) noexcept
    : RegReq() {
    *this = ::std::move(from);
  }

  inline RegReq& operator=(const RegReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegReq& operator=(RegReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegReq* internal_default_instance() {
    return reinterpret_cast<const RegReq*>(
               &_RegReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RegReq& a, RegReq& b) {
    a.Swap(&b);
  }
  inline void Swap(RegReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.RegReq";
  }
  protected:
  explicit RegReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 3,
    kPasswordFieldNumber = 4,
    kVerFieldNumber = 1,
    kFromFieldNumber = 5,
    kT3FieldNumber = 33,
    kT1FieldNumber = 31,
    kT2FieldNumber = 32,
  };
  // optional string user_name = 3;
  bool has_user_name() const;
  private:
  bool _internal_has_user_name() const;
  public:
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // optional string password = 4;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 from = 5;
  bool has_from() const;
  private:
  bool _internal_has_from() const;
  public:
  void clear_from();
  int32_t from() const;
  void set_from(int32_t value);
  private:
  int32_t _internal_from() const;
  void _internal_set_from(int32_t value);
  public:

  // optional int32 t3 = 33;
  bool has_t3() const;
  private:
  bool _internal_has_t3() const;
  public:
  void clear_t3();
  int32_t t3() const;
  void set_t3(int32_t value);
  private:
  int32_t _internal_t3() const;
  void _internal_set_t3(int32_t value);
  public:

  // optional int32 t1 = 31;
  bool has_t1() const;
  private:
  bool _internal_has_t1() const;
  public:
  void clear_t1();
  int32_t t1() const;
  void set_t1(int32_t value);
  private:
  int32_t _internal_t1() const;
  void _internal_set_t1(int32_t value);
  public:

  // optional int32 t2 = 32;
  bool has_t2() const;
  private:
  bool _internal_has_t2() const;
  public:
  void clear_t2();
  int32_t t2() const;
  void set_t2(int32_t value);
  private:
  int32_t _internal_t2() const;
  void _internal_set_t2(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.RegReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  int32_t ver_;
  int32_t from_;
  int32_t t3_;
  int32_t t1_;
  int32_t t2_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class RegRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.RegRsp) */ {
 public:
  inline RegRsp() : RegRsp(nullptr) {}
  ~RegRsp() override;
  explicit constexpr RegRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RegRsp(const RegRsp& from);
  RegRsp(RegRsp&& from) noexcept
    : RegRsp() {
    *this = ::std::move(from);
  }

  inline RegRsp& operator=(const RegRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline RegRsp& operator=(RegRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RegRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const RegRsp* internal_default_instance() {
    return reinterpret_cast<const RegRsp*>(
               &_RegRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RegRsp& a, RegRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(RegRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RegRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RegRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RegRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RegRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RegRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.RegRsp";
  }
  protected:
  explicit RegRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kRetFieldNumber = 3,
    kUserIdFieldNumber = 4,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 ret = 3;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // optional int32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.RegRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t ret_;
  int32_t user_id_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class LoginReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.LoginReq) */ {
 public:
  inline LoginReq() : LoginReq(nullptr) {}
  ~LoginReq() override;
  explicit constexpr LoginReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginReq(const LoginReq& from);
  LoginReq(LoginReq&& from) noexcept
    : LoginReq() {
    *this = ::std::move(from);
  }

  inline LoginReq& operator=(const LoginReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginReq& operator=(LoginReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginReq* internal_default_instance() {
    return reinterpret_cast<const LoginReq*>(
               &_LoginReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(LoginReq& a, LoginReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.LoginReq";
  }
  protected:
  explicit LoginReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserNameFieldNumber = 4,
    kPasswordFieldNumber = 5,
    kVerFieldNumber = 1,
    kUserIdFieldNumber = 3,
  };
  // optional string user_name = 4;
  bool has_user_name() const;
  private:
  bool _internal_has_user_name() const;
  public:
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // optional string password = 5;
  bool has_password() const;
  private:
  bool _internal_has_password() const;
  public:
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_NODISCARD std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.LoginReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  int32_t ver_;
  int32_t user_id_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class LoginRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.LoginRsp) */ {
 public:
  inline LoginRsp() : LoginRsp(nullptr) {}
  ~LoginRsp() override;
  explicit constexpr LoginRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginRsp(const LoginRsp& from);
  LoginRsp(LoginRsp&& from) noexcept
    : LoginRsp() {
    *this = ::std::move(from);
  }

  inline LoginRsp& operator=(const LoginRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginRsp& operator=(LoginRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoginRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginRsp* internal_default_instance() {
    return reinterpret_cast<const LoginRsp*>(
               &_LoginRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(LoginRsp& a, LoginRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoginRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoginRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoginRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.LoginRsp";
  }
  protected:
  explicit LoginRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kRetFieldNumber = 3,
    kUserIdFieldNumber = 4,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 ret = 3;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // optional int32 user_id = 4;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.LoginRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t ret_;
  int32_t user_id_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class LogoutReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.LogoutReq) */ {
 public:
  inline LogoutReq() : LogoutReq(nullptr) {}
  ~LogoutReq() override;
  explicit constexpr LogoutReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogoutReq(const LogoutReq& from);
  LogoutReq(LogoutReq&& from) noexcept
    : LogoutReq() {
    *this = ::std::move(from);
  }

  inline LogoutReq& operator=(const LogoutReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutReq& operator=(LogoutReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogoutReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogoutReq* internal_default_instance() {
    return reinterpret_cast<const LogoutReq*>(
               &_LogoutReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(LogoutReq& a, LogoutReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoutReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogoutReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogoutReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogoutReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogoutReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.LogoutReq";
  }
  protected:
  explicit LogoutReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kUserIdFieldNumber = 3,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.LogoutReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t user_id_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class LogoutRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.LogoutRsp) */ {
 public:
  inline LogoutRsp() : LogoutRsp(nullptr) {}
  ~LogoutRsp() override;
  explicit constexpr LogoutRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogoutRsp(const LogoutRsp& from);
  LogoutRsp(LogoutRsp&& from) noexcept
    : LogoutRsp() {
    *this = ::std::move(from);
  }

  inline LogoutRsp& operator=(const LogoutRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogoutRsp& operator=(LogoutRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LogoutRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogoutRsp* internal_default_instance() {
    return reinterpret_cast<const LogoutRsp*>(
               &_LogoutRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(LogoutRsp& a, LogoutRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(LogoutRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogoutRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LogoutRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LogoutRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LogoutRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LogoutRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogoutRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.LogoutRsp";
  }
  protected:
  explicit LogoutRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kRetFieldNumber = 3,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 ret = 3;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.LogoutRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t ret_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class DeleteUserReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.DeleteUserReq) */ {
 public:
  inline DeleteUserReq() : DeleteUserReq(nullptr) {}
  ~DeleteUserReq() override;
  explicit constexpr DeleteUserReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUserReq(const DeleteUserReq& from);
  DeleteUserReq(DeleteUserReq&& from) noexcept
    : DeleteUserReq() {
    *this = ::std::move(from);
  }

  inline DeleteUserReq& operator=(const DeleteUserReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUserReq& operator=(DeleteUserReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUserReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUserReq* internal_default_instance() {
    return reinterpret_cast<const DeleteUserReq*>(
               &_DeleteUserReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteUserReq& a, DeleteUserReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUserReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUserReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteUserReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteUserReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteUserReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteUserReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUserReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.DeleteUserReq";
  }
  protected:
  explicit DeleteUserReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kUserIdFieldNumber = 3,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.DeleteUserReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t user_id_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class DeleteUserRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.DeleteUserRsp) */ {
 public:
  inline DeleteUserRsp() : DeleteUserRsp(nullptr) {}
  ~DeleteUserRsp() override;
  explicit constexpr DeleteUserRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUserRsp(const DeleteUserRsp& from);
  DeleteUserRsp(DeleteUserRsp&& from) noexcept
    : DeleteUserRsp() {
    *this = ::std::move(from);
  }

  inline DeleteUserRsp& operator=(const DeleteUserRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUserRsp& operator=(DeleteUserRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUserRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUserRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteUserRsp*>(
               &_DeleteUserRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeleteUserRsp& a, DeleteUserRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUserRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUserRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteUserRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteUserRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteUserRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteUserRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUserRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.DeleteUserRsp";
  }
  protected:
  explicit DeleteUserRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kRetFieldNumber = 3,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 ret = 3;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.DeleteUserRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t ret_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class MessageBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.MessageBase) */ {
 public:
  inline MessageBase() : MessageBase(nullptr) {}
  ~MessageBase() override;
  explicit constexpr MessageBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageBase(const MessageBase& from);
  MessageBase(MessageBase&& from) noexcept
    : MessageBase() {
    *this = ::std::move(from);
  }

  inline MessageBase& operator=(const MessageBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageBase& operator=(MessageBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageBase* internal_default_instance() {
    return reinterpret_cast<const MessageBase*>(
               &_MessageBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MessageBase& a, MessageBase& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MessageBase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.MessageBase";
  }
  protected:
  explicit MessageBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 4,
    kVerFieldNumber = 1,
    kMessageIdFieldNumber = 2,
    kPublisherFieldNumber = 3,
    kPublishTimeFieldNumber = 5,
  };
  // optional string content = 4;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 message_id = 2;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  int32_t message_id() const;
  void set_message_id(int32_t value);
  private:
  int32_t _internal_message_id() const;
  void _internal_set_message_id(int32_t value);
  public:

  // optional int32 publisher = 3;
  bool has_publisher() const;
  private:
  bool _internal_has_publisher() const;
  public:
  void clear_publisher();
  int32_t publisher() const;
  void set_publisher(int32_t value);
  private:
  int32_t _internal_publisher() const;
  void _internal_set_publisher(int32_t value);
  public:

  // optional int32 publish_time = 5;
  bool has_publish_time() const;
  private:
  bool _internal_has_publish_time() const;
  public:
  void clear_publish_time();
  int32_t publish_time() const;
  void set_publish_time(int32_t value);
  private:
  int32_t _internal_publish_time() const;
  void _internal_set_publish_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.MessageBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  int32_t ver_;
  int32_t message_id_;
  int32_t publisher_;
  int32_t publish_time_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class PublishMessageReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.PublishMessageReq) */ {
 public:
  inline PublishMessageReq() : PublishMessageReq(nullptr) {}
  ~PublishMessageReq() override;
  explicit constexpr PublishMessageReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishMessageReq(const PublishMessageReq& from);
  PublishMessageReq(PublishMessageReq&& from) noexcept
    : PublishMessageReq() {
    *this = ::std::move(from);
  }

  inline PublishMessageReq& operator=(const PublishMessageReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishMessageReq& operator=(PublishMessageReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishMessageReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishMessageReq* internal_default_instance() {
    return reinterpret_cast<const PublishMessageReq*>(
               &_PublishMessageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(PublishMessageReq& a, PublishMessageReq& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishMessageReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishMessageReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishMessageReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishMessageReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishMessageReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishMessageReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishMessageReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.PublishMessageReq";
  }
  protected:
  explicit PublishMessageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 4,
    kVerFieldNumber = 1,
    kUserIdFieldNumber = 3,
  };
  // optional string content = 4;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.PublishMessageReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  int32_t ver_;
  int32_t user_id_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class PublishMessageRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.PublishMessageRsp) */ {
 public:
  inline PublishMessageRsp() : PublishMessageRsp(nullptr) {}
  ~PublishMessageRsp() override;
  explicit constexpr PublishMessageRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PublishMessageRsp(const PublishMessageRsp& from);
  PublishMessageRsp(PublishMessageRsp&& from) noexcept
    : PublishMessageRsp() {
    *this = ::std::move(from);
  }

  inline PublishMessageRsp& operator=(const PublishMessageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline PublishMessageRsp& operator=(PublishMessageRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PublishMessageRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const PublishMessageRsp* internal_default_instance() {
    return reinterpret_cast<const PublishMessageRsp*>(
               &_PublishMessageRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PublishMessageRsp& a, PublishMessageRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(PublishMessageRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PublishMessageRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PublishMessageRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PublishMessageRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PublishMessageRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PublishMessageRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PublishMessageRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.PublishMessageRsp";
  }
  protected:
  explicit PublishMessageRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kRetFieldNumber = 3,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 ret = 3;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.PublishMessageRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t ret_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class GetMessageReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.GetMessageReq) */ {
 public:
  inline GetMessageReq() : GetMessageReq(nullptr) {}
  ~GetMessageReq() override;
  explicit constexpr GetMessageReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMessageReq(const GetMessageReq& from);
  GetMessageReq(GetMessageReq&& from) noexcept
    : GetMessageReq() {
    *this = ::std::move(from);
  }

  inline GetMessageReq& operator=(const GetMessageReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMessageReq& operator=(GetMessageReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMessageReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMessageReq* internal_default_instance() {
    return reinterpret_cast<const GetMessageReq*>(
               &_GetMessageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetMessageReq& a, GetMessageReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMessageReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMessageReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMessageReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMessageReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMessageReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMessageReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMessageReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.GetMessageReq";
  }
  protected:
  explicit GetMessageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kUserIdFieldNumber = 3,
    kMessageIdFieldNumber = 4,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // int32 message_id = 4;
  void clear_message_id();
  int32_t message_id() const;
  void set_message_id(int32_t value);
  private:
  int32_t _internal_message_id() const;
  void _internal_set_message_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.GetMessageReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t user_id_;
  int32_t message_id_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class GetMessageRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.GetMessageRsp) */ {
 public:
  inline GetMessageRsp() : GetMessageRsp(nullptr) {}
  ~GetMessageRsp() override;
  explicit constexpr GetMessageRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMessageRsp(const GetMessageRsp& from);
  GetMessageRsp(GetMessageRsp&& from) noexcept
    : GetMessageRsp() {
    *this = ::std::move(from);
  }

  inline GetMessageRsp& operator=(const GetMessageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMessageRsp& operator=(GetMessageRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMessageRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMessageRsp* internal_default_instance() {
    return reinterpret_cast<const GetMessageRsp*>(
               &_GetMessageRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetMessageRsp& a, GetMessageRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMessageRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMessageRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMessageRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMessageRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMessageRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMessageRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMessageRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.GetMessageRsp";
  }
  protected:
  explicit GetMessageRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageInfoFieldNumber = 4,
    kVerFieldNumber = 1,
    kRetFieldNumber = 3,
  };
  // optional .ssp.MessageBase message_info = 4;
  bool has_message_info() const;
  private:
  bool _internal_has_message_info() const;
  public:
  void clear_message_info();
  const ::ssp::MessageBase& message_info() const;
  PROTOBUF_NODISCARD ::ssp::MessageBase* release_message_info();
  ::ssp::MessageBase* mutable_message_info();
  void set_allocated_message_info(::ssp::MessageBase* message_info);
  private:
  const ::ssp::MessageBase& _internal_message_info() const;
  ::ssp::MessageBase* _internal_mutable_message_info();
  public:
  void unsafe_arena_set_allocated_message_info(
      ::ssp::MessageBase* message_info);
  ::ssp::MessageBase* unsafe_arena_release_message_info();

  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 ret = 3;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.GetMessageRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::ssp::MessageBase* message_info_;
  int32_t ver_;
  int32_t ret_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class GetPhotoReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.GetPhotoReq) */ {
 public:
  inline GetPhotoReq() : GetPhotoReq(nullptr) {}
  ~GetPhotoReq() override;
  explicit constexpr GetPhotoReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPhotoReq(const GetPhotoReq& from);
  GetPhotoReq(GetPhotoReq&& from) noexcept
    : GetPhotoReq() {
    *this = ::std::move(from);
  }

  inline GetPhotoReq& operator=(const GetPhotoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPhotoReq& operator=(GetPhotoReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPhotoReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPhotoReq* internal_default_instance() {
    return reinterpret_cast<const GetPhotoReq*>(
               &_GetPhotoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetPhotoReq& a, GetPhotoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPhotoReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPhotoReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPhotoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPhotoReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPhotoReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPhotoReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPhotoReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.GetPhotoReq";
  }
  protected:
  explicit GetPhotoReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kUserIdFieldNumber = 3,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.GetPhotoReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t user_id_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class GetPhotoRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.GetPhotoRsp) */ {
 public:
  inline GetPhotoRsp() : GetPhotoRsp(nullptr) {}
  ~GetPhotoRsp() override;
  explicit constexpr GetPhotoRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPhotoRsp(const GetPhotoRsp& from);
  GetPhotoRsp(GetPhotoRsp&& from) noexcept
    : GetPhotoRsp() {
    *this = ::std::move(from);
  }

  inline GetPhotoRsp& operator=(const GetPhotoRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPhotoRsp& operator=(GetPhotoRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPhotoRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPhotoRsp* internal_default_instance() {
    return reinterpret_cast<const GetPhotoRsp*>(
               &_GetPhotoRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GetPhotoRsp& a, GetPhotoRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPhotoRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPhotoRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPhotoRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPhotoRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPhotoRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPhotoRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPhotoRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.GetPhotoRsp";
  }
  protected:
  explicit GetPhotoRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageInfoFieldNumber = 4,
    kVerFieldNumber = 1,
    kRetFieldNumber = 3,
  };
  // repeated .ssp.MessageBase message_info = 4;
  int message_info_size() const;
  private:
  int _internal_message_info_size() const;
  public:
  void clear_message_info();
  ::ssp::MessageBase* mutable_message_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ssp::MessageBase >*
      mutable_message_info();
  private:
  const ::ssp::MessageBase& _internal_message_info(int index) const;
  ::ssp::MessageBase* _internal_add_message_info();
  public:
  const ::ssp::MessageBase& message_info(int index) const;
  ::ssp::MessageBase* add_message_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ssp::MessageBase >&
      message_info() const;

  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 ret = 3;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.GetPhotoRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ssp::MessageBase > message_info_;
  int32_t ver_;
  int32_t ret_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class DeleteMessageReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.DeleteMessageReq) */ {
 public:
  inline DeleteMessageReq() : DeleteMessageReq(nullptr) {}
  ~DeleteMessageReq() override;
  explicit constexpr DeleteMessageReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteMessageReq(const DeleteMessageReq& from);
  DeleteMessageReq(DeleteMessageReq&& from) noexcept
    : DeleteMessageReq() {
    *this = ::std::move(from);
  }

  inline DeleteMessageReq& operator=(const DeleteMessageReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMessageReq& operator=(DeleteMessageReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteMessageReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteMessageReq* internal_default_instance() {
    return reinterpret_cast<const DeleteMessageReq*>(
               &_DeleteMessageReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DeleteMessageReq& a, DeleteMessageReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMessageReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMessageReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteMessageReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteMessageReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteMessageReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteMessageReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMessageReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.DeleteMessageReq";
  }
  protected:
  explicit DeleteMessageReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kUserIdFieldNumber = 3,
    kMessageIdFieldNumber = 4,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // optional int32 message_id = 4;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  int32_t message_id() const;
  void set_message_id(int32_t value);
  private:
  int32_t _internal_message_id() const;
  void _internal_set_message_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.DeleteMessageReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t user_id_;
  int32_t message_id_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class DeleteMessageRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.DeleteMessageRsp) */ {
 public:
  inline DeleteMessageRsp() : DeleteMessageRsp(nullptr) {}
  ~DeleteMessageRsp() override;
  explicit constexpr DeleteMessageRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteMessageRsp(const DeleteMessageRsp& from);
  DeleteMessageRsp(DeleteMessageRsp&& from) noexcept
    : DeleteMessageRsp() {
    *this = ::std::move(from);
  }

  inline DeleteMessageRsp& operator=(const DeleteMessageRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteMessageRsp& operator=(DeleteMessageRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteMessageRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteMessageRsp* internal_default_instance() {
    return reinterpret_cast<const DeleteMessageRsp*>(
               &_DeleteMessageRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(DeleteMessageRsp& a, DeleteMessageRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteMessageRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteMessageRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteMessageRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteMessageRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteMessageRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteMessageRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteMessageRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.DeleteMessageRsp";
  }
  protected:
  explicit DeleteMessageRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kRetFieldNumber = 3,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 ret = 3;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.DeleteMessageRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t ret_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class AddFriendReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.AddFriendReq) */ {
 public:
  inline AddFriendReq() : AddFriendReq(nullptr) {}
  ~AddFriendReq() override;
  explicit constexpr AddFriendReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriendReq(const AddFriendReq& from);
  AddFriendReq(AddFriendReq&& from) noexcept
    : AddFriendReq() {
    *this = ::std::move(from);
  }

  inline AddFriendReq& operator=(const AddFriendReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendReq& operator=(AddFriendReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendReq* internal_default_instance() {
    return reinterpret_cast<const AddFriendReq*>(
               &_AddFriendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AddFriendReq& a, AddFriendReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriendReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriendReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddFriendReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.AddFriendReq";
  }
  protected:
  explicit AddFriendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kUserIdFieldNumber = 3,
    kOtherIdFieldNumber = 4,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // optional int32 other_id = 4;
  bool has_other_id() const;
  private:
  bool _internal_has_other_id() const;
  public:
  void clear_other_id();
  int32_t other_id() const;
  void set_other_id(int32_t value);
  private:
  int32_t _internal_other_id() const;
  void _internal_set_other_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.AddFriendReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t user_id_;
  int32_t other_id_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class AddFriendRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.AddFriendRsp) */ {
 public:
  inline AddFriendRsp() : AddFriendRsp(nullptr) {}
  ~AddFriendRsp() override;
  explicit constexpr AddFriendRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddFriendRsp(const AddFriendRsp& from);
  AddFriendRsp(AddFriendRsp&& from) noexcept
    : AddFriendRsp() {
    *this = ::std::move(from);
  }

  inline AddFriendRsp& operator=(const AddFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddFriendRsp& operator=(AddFriendRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddFriendRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddFriendRsp* internal_default_instance() {
    return reinterpret_cast<const AddFriendRsp*>(
               &_AddFriendRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AddFriendRsp& a, AddFriendRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddFriendRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddFriendRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddFriendRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddFriendRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddFriendRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddFriendRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddFriendRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.AddFriendRsp";
  }
  protected:
  explicit AddFriendRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kRetFieldNumber = 3,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 ret = 3;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.AddFriendRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t ret_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class DelFriendReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.DelFriendReq) */ {
 public:
  inline DelFriendReq() : DelFriendReq(nullptr) {}
  ~DelFriendReq() override;
  explicit constexpr DelFriendReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelFriendReq(const DelFriendReq& from);
  DelFriendReq(DelFriendReq&& from) noexcept
    : DelFriendReq() {
    *this = ::std::move(from);
  }

  inline DelFriendReq& operator=(const DelFriendReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelFriendReq& operator=(DelFriendReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelFriendReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelFriendReq* internal_default_instance() {
    return reinterpret_cast<const DelFriendReq*>(
               &_DelFriendReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DelFriendReq& a, DelFriendReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DelFriendReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelFriendReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelFriendReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelFriendReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelFriendReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DelFriendReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelFriendReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.DelFriendReq";
  }
  protected:
  explicit DelFriendReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kUserIdFieldNumber = 3,
    kOtherIdFieldNumber = 4,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // optional int32 other_id = 4;
  bool has_other_id() const;
  private:
  bool _internal_has_other_id() const;
  public:
  void clear_other_id();
  int32_t other_id() const;
  void set_other_id(int32_t value);
  private:
  int32_t _internal_other_id() const;
  void _internal_set_other_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.DelFriendReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t user_id_;
  int32_t other_id_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class DelFriendRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.DelFriendRsp) */ {
 public:
  inline DelFriendRsp() : DelFriendRsp(nullptr) {}
  ~DelFriendRsp() override;
  explicit constexpr DelFriendRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelFriendRsp(const DelFriendRsp& from);
  DelFriendRsp(DelFriendRsp&& from) noexcept
    : DelFriendRsp() {
    *this = ::std::move(from);
  }

  inline DelFriendRsp& operator=(const DelFriendRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelFriendRsp& operator=(DelFriendRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelFriendRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelFriendRsp* internal_default_instance() {
    return reinterpret_cast<const DelFriendRsp*>(
               &_DelFriendRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(DelFriendRsp& a, DelFriendRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DelFriendRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelFriendRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelFriendRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelFriendRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelFriendRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DelFriendRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelFriendRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.DelFriendRsp";
  }
  protected:
  explicit DelFriendRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kRetFieldNumber = 3,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 ret = 3;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.DelFriendRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t ret_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class AddBlackReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.AddBlackReq) */ {
 public:
  inline AddBlackReq() : AddBlackReq(nullptr) {}
  ~AddBlackReq() override;
  explicit constexpr AddBlackReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddBlackReq(const AddBlackReq& from);
  AddBlackReq(AddBlackReq&& from) noexcept
    : AddBlackReq() {
    *this = ::std::move(from);
  }

  inline AddBlackReq& operator=(const AddBlackReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddBlackReq& operator=(AddBlackReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddBlackReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddBlackReq* internal_default_instance() {
    return reinterpret_cast<const AddBlackReq*>(
               &_AddBlackReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(AddBlackReq& a, AddBlackReq& b) {
    a.Swap(&b);
  }
  inline void Swap(AddBlackReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddBlackReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddBlackReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddBlackReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddBlackReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddBlackReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddBlackReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.AddBlackReq";
  }
  protected:
  explicit AddBlackReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kUserIdFieldNumber = 3,
    kOtherIdFieldNumber = 4,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // optional int32 other_id = 4;
  bool has_other_id() const;
  private:
  bool _internal_has_other_id() const;
  public:
  void clear_other_id();
  int32_t other_id() const;
  void set_other_id(int32_t value);
  private:
  int32_t _internal_other_id() const;
  void _internal_set_other_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.AddBlackReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t user_id_;
  int32_t other_id_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class AddBlackRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.AddBlackRsp) */ {
 public:
  inline AddBlackRsp() : AddBlackRsp(nullptr) {}
  ~AddBlackRsp() override;
  explicit constexpr AddBlackRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddBlackRsp(const AddBlackRsp& from);
  AddBlackRsp(AddBlackRsp&& from) noexcept
    : AddBlackRsp() {
    *this = ::std::move(from);
  }

  inline AddBlackRsp& operator=(const AddBlackRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddBlackRsp& operator=(AddBlackRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddBlackRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddBlackRsp* internal_default_instance() {
    return reinterpret_cast<const AddBlackRsp*>(
               &_AddBlackRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(AddBlackRsp& a, AddBlackRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddBlackRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddBlackRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AddBlackRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AddBlackRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AddBlackRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AddBlackRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddBlackRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.AddBlackRsp";
  }
  protected:
  explicit AddBlackRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kRetFieldNumber = 3,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 ret = 3;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.AddBlackRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t ret_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class DelBlackReq final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.DelBlackReq) */ {
 public:
  inline DelBlackReq() : DelBlackReq(nullptr) {}
  ~DelBlackReq() override;
  explicit constexpr DelBlackReq(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelBlackReq(const DelBlackReq& from);
  DelBlackReq(DelBlackReq&& from) noexcept
    : DelBlackReq() {
    *this = ::std::move(from);
  }

  inline DelBlackReq& operator=(const DelBlackReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelBlackReq& operator=(DelBlackReq&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelBlackReq& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelBlackReq* internal_default_instance() {
    return reinterpret_cast<const DelBlackReq*>(
               &_DelBlackReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(DelBlackReq& a, DelBlackReq& b) {
    a.Swap(&b);
  }
  inline void Swap(DelBlackReq* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelBlackReq* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelBlackReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelBlackReq>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelBlackReq& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DelBlackReq& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelBlackReq* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.DelBlackReq";
  }
  protected:
  explicit DelBlackReq(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kUserIdFieldNumber = 3,
    kOtherIdFieldNumber = 4,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 user_id = 3;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // optional int32 other_id = 4;
  bool has_other_id() const;
  private:
  bool _internal_has_other_id() const;
  public:
  void clear_other_id();
  int32_t other_id() const;
  void set_other_id(int32_t value);
  private:
  int32_t _internal_other_id() const;
  void _internal_set_other_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.DelBlackReq)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t user_id_;
  int32_t other_id_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// -------------------------------------------------------------------

class DelBlackRsp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.DelBlackRsp) */ {
 public:
  inline DelBlackRsp() : DelBlackRsp(nullptr) {}
  ~DelBlackRsp() override;
  explicit constexpr DelBlackRsp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelBlackRsp(const DelBlackRsp& from);
  DelBlackRsp(DelBlackRsp&& from) noexcept
    : DelBlackRsp() {
    *this = ::std::move(from);
  }

  inline DelBlackRsp& operator=(const DelBlackRsp& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelBlackRsp& operator=(DelBlackRsp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelBlackRsp& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelBlackRsp* internal_default_instance() {
    return reinterpret_cast<const DelBlackRsp*>(
               &_DelBlackRsp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(DelBlackRsp& a, DelBlackRsp& b) {
    a.Swap(&b);
  }
  inline void Swap(DelBlackRsp* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelBlackRsp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DelBlackRsp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DelBlackRsp>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DelBlackRsp& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DelBlackRsp& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelBlackRsp* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.DelBlackRsp";
  }
  protected:
  explicit DelBlackRsp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerFieldNumber = 1,
    kRetFieldNumber = 3,
  };
  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 ret = 3;
  bool has_ret() const;
  private:
  bool _internal_has_ret() const;
  public:
  void clear_ret();
  int32_t ret() const;
  void set_ret(int32_t value);
  private:
  int32_t _internal_ret() const;
  void _internal_set_ret(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.DelBlackRsp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  int32_t ver_;
  int32_t ret_;
  friend struct ::TableStruct_message_5fdefine_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqInfoBase

// optional int32 ver = 1;
inline bool ReqInfoBase::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ReqInfoBase::has_ver() const {
  return _internal_has_ver();
}
inline void ReqInfoBase::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline int32_t ReqInfoBase::_internal_ver() const {
  return ver_;
}
inline int32_t ReqInfoBase::ver() const {
  // @@protoc_insertion_point(field_get:ssp.ReqInfoBase.ver)
  return _internal_ver();
}
inline void ReqInfoBase::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00001000u;
  ver_ = value;
}
inline void ReqInfoBase::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.ReqInfoBase.ver)
}

// optional int32 mess_type = 2;
inline bool ReqInfoBase::_internal_has_mess_type() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ReqInfoBase::has_mess_type() const {
  return _internal_has_mess_type();
}
inline void ReqInfoBase::clear_mess_type() {
  mess_type_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline int32_t ReqInfoBase::_internal_mess_type() const {
  return mess_type_;
}
inline int32_t ReqInfoBase::mess_type() const {
  // @@protoc_insertion_point(field_get:ssp.ReqInfoBase.mess_type)
  return _internal_mess_type();
}
inline void ReqInfoBase::_internal_set_mess_type(int32_t value) {
  _has_bits_[0] |= 0x00002000u;
  mess_type_ = value;
}
inline void ReqInfoBase::set_mess_type(int32_t value) {
  _internal_set_mess_type(value);
  // @@protoc_insertion_point(field_set:ssp.ReqInfoBase.mess_type)
}

// optional .ssp.RegReq reg_req = 3;
inline bool ReqInfoBase::_internal_has_reg_req() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || reg_req_ != nullptr);
  return value;
}
inline bool ReqInfoBase::has_reg_req() const {
  return _internal_has_reg_req();
}
inline void ReqInfoBase::clear_reg_req() {
  if (reg_req_ != nullptr) reg_req_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssp::RegReq& ReqInfoBase::_internal_reg_req() const {
  const ::ssp::RegReq* p = reg_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::RegReq&>(
      ::ssp::_RegReq_default_instance_);
}
inline const ::ssp::RegReq& ReqInfoBase::reg_req() const {
  // @@protoc_insertion_point(field_get:ssp.ReqInfoBase.reg_req)
  return _internal_reg_req();
}
inline void ReqInfoBase::unsafe_arena_set_allocated_reg_req(
    ::ssp::RegReq* reg_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reg_req_);
  }
  reg_req_ = reg_req;
  if (reg_req) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.ReqInfoBase.reg_req)
}
inline ::ssp::RegReq* ReqInfoBase::release_reg_req() {
  _has_bits_[0] &= ~0x00000001u;
  ::ssp::RegReq* temp = reg_req_;
  reg_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::RegReq* ReqInfoBase::unsafe_arena_release_reg_req() {
  // @@protoc_insertion_point(field_release:ssp.ReqInfoBase.reg_req)
  _has_bits_[0] &= ~0x00000001u;
  ::ssp::RegReq* temp = reg_req_;
  reg_req_ = nullptr;
  return temp;
}
inline ::ssp::RegReq* ReqInfoBase::_internal_mutable_reg_req() {
  _has_bits_[0] |= 0x00000001u;
  if (reg_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::RegReq>(GetArenaForAllocation());
    reg_req_ = p;
  }
  return reg_req_;
}
inline ::ssp::RegReq* ReqInfoBase::mutable_reg_req() {
  ::ssp::RegReq* _msg = _internal_mutable_reg_req();
  // @@protoc_insertion_point(field_mutable:ssp.ReqInfoBase.reg_req)
  return _msg;
}
inline void ReqInfoBase::set_allocated_reg_req(::ssp::RegReq* reg_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reg_req_;
  }
  if (reg_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::RegReq>::GetOwningArena(reg_req);
    if (message_arena != submessage_arena) {
      reg_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reg_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reg_req_ = reg_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.ReqInfoBase.reg_req)
}

// optional .ssp.LoginReq login_req = 4;
inline bool ReqInfoBase::_internal_has_login_req() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || login_req_ != nullptr);
  return value;
}
inline bool ReqInfoBase::has_login_req() const {
  return _internal_has_login_req();
}
inline void ReqInfoBase::clear_login_req() {
  if (login_req_ != nullptr) login_req_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ssp::LoginReq& ReqInfoBase::_internal_login_req() const {
  const ::ssp::LoginReq* p = login_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::LoginReq&>(
      ::ssp::_LoginReq_default_instance_);
}
inline const ::ssp::LoginReq& ReqInfoBase::login_req() const {
  // @@protoc_insertion_point(field_get:ssp.ReqInfoBase.login_req)
  return _internal_login_req();
}
inline void ReqInfoBase::unsafe_arena_set_allocated_login_req(
    ::ssp::LoginReq* login_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_req_);
  }
  login_req_ = login_req;
  if (login_req) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.ReqInfoBase.login_req)
}
inline ::ssp::LoginReq* ReqInfoBase::release_login_req() {
  _has_bits_[0] &= ~0x00000002u;
  ::ssp::LoginReq* temp = login_req_;
  login_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::LoginReq* ReqInfoBase::unsafe_arena_release_login_req() {
  // @@protoc_insertion_point(field_release:ssp.ReqInfoBase.login_req)
  _has_bits_[0] &= ~0x00000002u;
  ::ssp::LoginReq* temp = login_req_;
  login_req_ = nullptr;
  return temp;
}
inline ::ssp::LoginReq* ReqInfoBase::_internal_mutable_login_req() {
  _has_bits_[0] |= 0x00000002u;
  if (login_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::LoginReq>(GetArenaForAllocation());
    login_req_ = p;
  }
  return login_req_;
}
inline ::ssp::LoginReq* ReqInfoBase::mutable_login_req() {
  ::ssp::LoginReq* _msg = _internal_mutable_login_req();
  // @@protoc_insertion_point(field_mutable:ssp.ReqInfoBase.login_req)
  return _msg;
}
inline void ReqInfoBase::set_allocated_login_req(::ssp::LoginReq* login_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete login_req_;
  }
  if (login_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::LoginReq>::GetOwningArena(login_req);
    if (message_arena != submessage_arena) {
      login_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  login_req_ = login_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.ReqInfoBase.login_req)
}

// optional .ssp.LogoutReq logout_req = 5;
inline bool ReqInfoBase::_internal_has_logout_req() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || logout_req_ != nullptr);
  return value;
}
inline bool ReqInfoBase::has_logout_req() const {
  return _internal_has_logout_req();
}
inline void ReqInfoBase::clear_logout_req() {
  if (logout_req_ != nullptr) logout_req_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ssp::LogoutReq& ReqInfoBase::_internal_logout_req() const {
  const ::ssp::LogoutReq* p = logout_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::LogoutReq&>(
      ::ssp::_LogoutReq_default_instance_);
}
inline const ::ssp::LogoutReq& ReqInfoBase::logout_req() const {
  // @@protoc_insertion_point(field_get:ssp.ReqInfoBase.logout_req)
  return _internal_logout_req();
}
inline void ReqInfoBase::unsafe_arena_set_allocated_logout_req(
    ::ssp::LogoutReq* logout_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logout_req_);
  }
  logout_req_ = logout_req;
  if (logout_req) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.ReqInfoBase.logout_req)
}
inline ::ssp::LogoutReq* ReqInfoBase::release_logout_req() {
  _has_bits_[0] &= ~0x00000004u;
  ::ssp::LogoutReq* temp = logout_req_;
  logout_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::LogoutReq* ReqInfoBase::unsafe_arena_release_logout_req() {
  // @@protoc_insertion_point(field_release:ssp.ReqInfoBase.logout_req)
  _has_bits_[0] &= ~0x00000004u;
  ::ssp::LogoutReq* temp = logout_req_;
  logout_req_ = nullptr;
  return temp;
}
inline ::ssp::LogoutReq* ReqInfoBase::_internal_mutable_logout_req() {
  _has_bits_[0] |= 0x00000004u;
  if (logout_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::LogoutReq>(GetArenaForAllocation());
    logout_req_ = p;
  }
  return logout_req_;
}
inline ::ssp::LogoutReq* ReqInfoBase::mutable_logout_req() {
  ::ssp::LogoutReq* _msg = _internal_mutable_logout_req();
  // @@protoc_insertion_point(field_mutable:ssp.ReqInfoBase.logout_req)
  return _msg;
}
inline void ReqInfoBase::set_allocated_logout_req(::ssp::LogoutReq* logout_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete logout_req_;
  }
  if (logout_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::LogoutReq>::GetOwningArena(logout_req);
    if (message_arena != submessage_arena) {
      logout_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logout_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  logout_req_ = logout_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.ReqInfoBase.logout_req)
}

// optional .ssp.GetMessageReq get_mess_req = 6;
inline bool ReqInfoBase::_internal_has_get_mess_req() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || get_mess_req_ != nullptr);
  return value;
}
inline bool ReqInfoBase::has_get_mess_req() const {
  return _internal_has_get_mess_req();
}
inline void ReqInfoBase::clear_get_mess_req() {
  if (get_mess_req_ != nullptr) get_mess_req_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ssp::GetMessageReq& ReqInfoBase::_internal_get_mess_req() const {
  const ::ssp::GetMessageReq* p = get_mess_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::GetMessageReq&>(
      ::ssp::_GetMessageReq_default_instance_);
}
inline const ::ssp::GetMessageReq& ReqInfoBase::get_mess_req() const {
  // @@protoc_insertion_point(field_get:ssp.ReqInfoBase.get_mess_req)
  return _internal_get_mess_req();
}
inline void ReqInfoBase::unsafe_arena_set_allocated_get_mess_req(
    ::ssp::GetMessageReq* get_mess_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_mess_req_);
  }
  get_mess_req_ = get_mess_req;
  if (get_mess_req) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.ReqInfoBase.get_mess_req)
}
inline ::ssp::GetMessageReq* ReqInfoBase::release_get_mess_req() {
  _has_bits_[0] &= ~0x00000008u;
  ::ssp::GetMessageReq* temp = get_mess_req_;
  get_mess_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::GetMessageReq* ReqInfoBase::unsafe_arena_release_get_mess_req() {
  // @@protoc_insertion_point(field_release:ssp.ReqInfoBase.get_mess_req)
  _has_bits_[0] &= ~0x00000008u;
  ::ssp::GetMessageReq* temp = get_mess_req_;
  get_mess_req_ = nullptr;
  return temp;
}
inline ::ssp::GetMessageReq* ReqInfoBase::_internal_mutable_get_mess_req() {
  _has_bits_[0] |= 0x00000008u;
  if (get_mess_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::GetMessageReq>(GetArenaForAllocation());
    get_mess_req_ = p;
  }
  return get_mess_req_;
}
inline ::ssp::GetMessageReq* ReqInfoBase::mutable_get_mess_req() {
  ::ssp::GetMessageReq* _msg = _internal_mutable_get_mess_req();
  // @@protoc_insertion_point(field_mutable:ssp.ReqInfoBase.get_mess_req)
  return _msg;
}
inline void ReqInfoBase::set_allocated_get_mess_req(::ssp::GetMessageReq* get_mess_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete get_mess_req_;
  }
  if (get_mess_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::GetMessageReq>::GetOwningArena(get_mess_req);
    if (message_arena != submessage_arena) {
      get_mess_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_mess_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  get_mess_req_ = get_mess_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.ReqInfoBase.get_mess_req)
}

// optional .ssp.PublishMessageReq publish_mess_req = 7;
inline bool ReqInfoBase::_internal_has_publish_mess_req() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || publish_mess_req_ != nullptr);
  return value;
}
inline bool ReqInfoBase::has_publish_mess_req() const {
  return _internal_has_publish_mess_req();
}
inline void ReqInfoBase::clear_publish_mess_req() {
  if (publish_mess_req_ != nullptr) publish_mess_req_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ssp::PublishMessageReq& ReqInfoBase::_internal_publish_mess_req() const {
  const ::ssp::PublishMessageReq* p = publish_mess_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::PublishMessageReq&>(
      ::ssp::_PublishMessageReq_default_instance_);
}
inline const ::ssp::PublishMessageReq& ReqInfoBase::publish_mess_req() const {
  // @@protoc_insertion_point(field_get:ssp.ReqInfoBase.publish_mess_req)
  return _internal_publish_mess_req();
}
inline void ReqInfoBase::unsafe_arena_set_allocated_publish_mess_req(
    ::ssp::PublishMessageReq* publish_mess_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publish_mess_req_);
  }
  publish_mess_req_ = publish_mess_req;
  if (publish_mess_req) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.ReqInfoBase.publish_mess_req)
}
inline ::ssp::PublishMessageReq* ReqInfoBase::release_publish_mess_req() {
  _has_bits_[0] &= ~0x00000010u;
  ::ssp::PublishMessageReq* temp = publish_mess_req_;
  publish_mess_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::PublishMessageReq* ReqInfoBase::unsafe_arena_release_publish_mess_req() {
  // @@protoc_insertion_point(field_release:ssp.ReqInfoBase.publish_mess_req)
  _has_bits_[0] &= ~0x00000010u;
  ::ssp::PublishMessageReq* temp = publish_mess_req_;
  publish_mess_req_ = nullptr;
  return temp;
}
inline ::ssp::PublishMessageReq* ReqInfoBase::_internal_mutable_publish_mess_req() {
  _has_bits_[0] |= 0x00000010u;
  if (publish_mess_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::PublishMessageReq>(GetArenaForAllocation());
    publish_mess_req_ = p;
  }
  return publish_mess_req_;
}
inline ::ssp::PublishMessageReq* ReqInfoBase::mutable_publish_mess_req() {
  ::ssp::PublishMessageReq* _msg = _internal_mutable_publish_mess_req();
  // @@protoc_insertion_point(field_mutable:ssp.ReqInfoBase.publish_mess_req)
  return _msg;
}
inline void ReqInfoBase::set_allocated_publish_mess_req(::ssp::PublishMessageReq* publish_mess_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete publish_mess_req_;
  }
  if (publish_mess_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::PublishMessageReq>::GetOwningArena(publish_mess_req);
    if (message_arena != submessage_arena) {
      publish_mess_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish_mess_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  publish_mess_req_ = publish_mess_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.ReqInfoBase.publish_mess_req)
}

// optional .ssp.AddFriendReq add_friend_req = 8;
inline bool ReqInfoBase::_internal_has_add_friend_req() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || add_friend_req_ != nullptr);
  return value;
}
inline bool ReqInfoBase::has_add_friend_req() const {
  return _internal_has_add_friend_req();
}
inline void ReqInfoBase::clear_add_friend_req() {
  if (add_friend_req_ != nullptr) add_friend_req_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::ssp::AddFriendReq& ReqInfoBase::_internal_add_friend_req() const {
  const ::ssp::AddFriendReq* p = add_friend_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::AddFriendReq&>(
      ::ssp::_AddFriendReq_default_instance_);
}
inline const ::ssp::AddFriendReq& ReqInfoBase::add_friend_req() const {
  // @@protoc_insertion_point(field_get:ssp.ReqInfoBase.add_friend_req)
  return _internal_add_friend_req();
}
inline void ReqInfoBase::unsafe_arena_set_allocated_add_friend_req(
    ::ssp::AddFriendReq* add_friend_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_friend_req_);
  }
  add_friend_req_ = add_friend_req;
  if (add_friend_req) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.ReqInfoBase.add_friend_req)
}
inline ::ssp::AddFriendReq* ReqInfoBase::release_add_friend_req() {
  _has_bits_[0] &= ~0x00000020u;
  ::ssp::AddFriendReq* temp = add_friend_req_;
  add_friend_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::AddFriendReq* ReqInfoBase::unsafe_arena_release_add_friend_req() {
  // @@protoc_insertion_point(field_release:ssp.ReqInfoBase.add_friend_req)
  _has_bits_[0] &= ~0x00000020u;
  ::ssp::AddFriendReq* temp = add_friend_req_;
  add_friend_req_ = nullptr;
  return temp;
}
inline ::ssp::AddFriendReq* ReqInfoBase::_internal_mutable_add_friend_req() {
  _has_bits_[0] |= 0x00000020u;
  if (add_friend_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::AddFriendReq>(GetArenaForAllocation());
    add_friend_req_ = p;
  }
  return add_friend_req_;
}
inline ::ssp::AddFriendReq* ReqInfoBase::mutable_add_friend_req() {
  ::ssp::AddFriendReq* _msg = _internal_mutable_add_friend_req();
  // @@protoc_insertion_point(field_mutable:ssp.ReqInfoBase.add_friend_req)
  return _msg;
}
inline void ReqInfoBase::set_allocated_add_friend_req(::ssp::AddFriendReq* add_friend_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_friend_req_;
  }
  if (add_friend_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::AddFriendReq>::GetOwningArena(add_friend_req);
    if (message_arena != submessage_arena) {
      add_friend_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_friend_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  add_friend_req_ = add_friend_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.ReqInfoBase.add_friend_req)
}

// optional .ssp.AddBlackReq add_black_req = 9;
inline bool ReqInfoBase::_internal_has_add_black_req() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || add_black_req_ != nullptr);
  return value;
}
inline bool ReqInfoBase::has_add_black_req() const {
  return _internal_has_add_black_req();
}
inline void ReqInfoBase::clear_add_black_req() {
  if (add_black_req_ != nullptr) add_black_req_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::ssp::AddBlackReq& ReqInfoBase::_internal_add_black_req() const {
  const ::ssp::AddBlackReq* p = add_black_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::AddBlackReq&>(
      ::ssp::_AddBlackReq_default_instance_);
}
inline const ::ssp::AddBlackReq& ReqInfoBase::add_black_req() const {
  // @@protoc_insertion_point(field_get:ssp.ReqInfoBase.add_black_req)
  return _internal_add_black_req();
}
inline void ReqInfoBase::unsafe_arena_set_allocated_add_black_req(
    ::ssp::AddBlackReq* add_black_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_black_req_);
  }
  add_black_req_ = add_black_req;
  if (add_black_req) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.ReqInfoBase.add_black_req)
}
inline ::ssp::AddBlackReq* ReqInfoBase::release_add_black_req() {
  _has_bits_[0] &= ~0x00000040u;
  ::ssp::AddBlackReq* temp = add_black_req_;
  add_black_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::AddBlackReq* ReqInfoBase::unsafe_arena_release_add_black_req() {
  // @@protoc_insertion_point(field_release:ssp.ReqInfoBase.add_black_req)
  _has_bits_[0] &= ~0x00000040u;
  ::ssp::AddBlackReq* temp = add_black_req_;
  add_black_req_ = nullptr;
  return temp;
}
inline ::ssp::AddBlackReq* ReqInfoBase::_internal_mutable_add_black_req() {
  _has_bits_[0] |= 0x00000040u;
  if (add_black_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::AddBlackReq>(GetArenaForAllocation());
    add_black_req_ = p;
  }
  return add_black_req_;
}
inline ::ssp::AddBlackReq* ReqInfoBase::mutable_add_black_req() {
  ::ssp::AddBlackReq* _msg = _internal_mutable_add_black_req();
  // @@protoc_insertion_point(field_mutable:ssp.ReqInfoBase.add_black_req)
  return _msg;
}
inline void ReqInfoBase::set_allocated_add_black_req(::ssp::AddBlackReq* add_black_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_black_req_;
  }
  if (add_black_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::AddBlackReq>::GetOwningArena(add_black_req);
    if (message_arena != submessage_arena) {
      add_black_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_black_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  add_black_req_ = add_black_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.ReqInfoBase.add_black_req)
}

// optional .ssp.DelFriendReq del_friend_req = 10;
inline bool ReqInfoBase::_internal_has_del_friend_req() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || del_friend_req_ != nullptr);
  return value;
}
inline bool ReqInfoBase::has_del_friend_req() const {
  return _internal_has_del_friend_req();
}
inline void ReqInfoBase::clear_del_friend_req() {
  if (del_friend_req_ != nullptr) del_friend_req_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::ssp::DelFriendReq& ReqInfoBase::_internal_del_friend_req() const {
  const ::ssp::DelFriendReq* p = del_friend_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::DelFriendReq&>(
      ::ssp::_DelFriendReq_default_instance_);
}
inline const ::ssp::DelFriendReq& ReqInfoBase::del_friend_req() const {
  // @@protoc_insertion_point(field_get:ssp.ReqInfoBase.del_friend_req)
  return _internal_del_friend_req();
}
inline void ReqInfoBase::unsafe_arena_set_allocated_del_friend_req(
    ::ssp::DelFriendReq* del_friend_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(del_friend_req_);
  }
  del_friend_req_ = del_friend_req;
  if (del_friend_req) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.ReqInfoBase.del_friend_req)
}
inline ::ssp::DelFriendReq* ReqInfoBase::release_del_friend_req() {
  _has_bits_[0] &= ~0x00000080u;
  ::ssp::DelFriendReq* temp = del_friend_req_;
  del_friend_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::DelFriendReq* ReqInfoBase::unsafe_arena_release_del_friend_req() {
  // @@protoc_insertion_point(field_release:ssp.ReqInfoBase.del_friend_req)
  _has_bits_[0] &= ~0x00000080u;
  ::ssp::DelFriendReq* temp = del_friend_req_;
  del_friend_req_ = nullptr;
  return temp;
}
inline ::ssp::DelFriendReq* ReqInfoBase::_internal_mutable_del_friend_req() {
  _has_bits_[0] |= 0x00000080u;
  if (del_friend_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::DelFriendReq>(GetArenaForAllocation());
    del_friend_req_ = p;
  }
  return del_friend_req_;
}
inline ::ssp::DelFriendReq* ReqInfoBase::mutable_del_friend_req() {
  ::ssp::DelFriendReq* _msg = _internal_mutable_del_friend_req();
  // @@protoc_insertion_point(field_mutable:ssp.ReqInfoBase.del_friend_req)
  return _msg;
}
inline void ReqInfoBase::set_allocated_del_friend_req(::ssp::DelFriendReq* del_friend_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete del_friend_req_;
  }
  if (del_friend_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::DelFriendReq>::GetOwningArena(del_friend_req);
    if (message_arena != submessage_arena) {
      del_friend_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, del_friend_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  del_friend_req_ = del_friend_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.ReqInfoBase.del_friend_req)
}

// optional .ssp.DelBlackReq del_black_req = 11;
inline bool ReqInfoBase::_internal_has_del_black_req() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || del_black_req_ != nullptr);
  return value;
}
inline bool ReqInfoBase::has_del_black_req() const {
  return _internal_has_del_black_req();
}
inline void ReqInfoBase::clear_del_black_req() {
  if (del_black_req_ != nullptr) del_black_req_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::ssp::DelBlackReq& ReqInfoBase::_internal_del_black_req() const {
  const ::ssp::DelBlackReq* p = del_black_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::DelBlackReq&>(
      ::ssp::_DelBlackReq_default_instance_);
}
inline const ::ssp::DelBlackReq& ReqInfoBase::del_black_req() const {
  // @@protoc_insertion_point(field_get:ssp.ReqInfoBase.del_black_req)
  return _internal_del_black_req();
}
inline void ReqInfoBase::unsafe_arena_set_allocated_del_black_req(
    ::ssp::DelBlackReq* del_black_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(del_black_req_);
  }
  del_black_req_ = del_black_req;
  if (del_black_req) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.ReqInfoBase.del_black_req)
}
inline ::ssp::DelBlackReq* ReqInfoBase::release_del_black_req() {
  _has_bits_[0] &= ~0x00000100u;
  ::ssp::DelBlackReq* temp = del_black_req_;
  del_black_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::DelBlackReq* ReqInfoBase::unsafe_arena_release_del_black_req() {
  // @@protoc_insertion_point(field_release:ssp.ReqInfoBase.del_black_req)
  _has_bits_[0] &= ~0x00000100u;
  ::ssp::DelBlackReq* temp = del_black_req_;
  del_black_req_ = nullptr;
  return temp;
}
inline ::ssp::DelBlackReq* ReqInfoBase::_internal_mutable_del_black_req() {
  _has_bits_[0] |= 0x00000100u;
  if (del_black_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::DelBlackReq>(GetArenaForAllocation());
    del_black_req_ = p;
  }
  return del_black_req_;
}
inline ::ssp::DelBlackReq* ReqInfoBase::mutable_del_black_req() {
  ::ssp::DelBlackReq* _msg = _internal_mutable_del_black_req();
  // @@protoc_insertion_point(field_mutable:ssp.ReqInfoBase.del_black_req)
  return _msg;
}
inline void ReqInfoBase::set_allocated_del_black_req(::ssp::DelBlackReq* del_black_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete del_black_req_;
  }
  if (del_black_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::DelBlackReq>::GetOwningArena(del_black_req);
    if (message_arena != submessage_arena) {
      del_black_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, del_black_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  del_black_req_ = del_black_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.ReqInfoBase.del_black_req)
}

// optional .ssp.GetPhotoReq get_photo_req = 12;
inline bool ReqInfoBase::_internal_has_get_photo_req() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || get_photo_req_ != nullptr);
  return value;
}
inline bool ReqInfoBase::has_get_photo_req() const {
  return _internal_has_get_photo_req();
}
inline void ReqInfoBase::clear_get_photo_req() {
  if (get_photo_req_ != nullptr) get_photo_req_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::ssp::GetPhotoReq& ReqInfoBase::_internal_get_photo_req() const {
  const ::ssp::GetPhotoReq* p = get_photo_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::GetPhotoReq&>(
      ::ssp::_GetPhotoReq_default_instance_);
}
inline const ::ssp::GetPhotoReq& ReqInfoBase::get_photo_req() const {
  // @@protoc_insertion_point(field_get:ssp.ReqInfoBase.get_photo_req)
  return _internal_get_photo_req();
}
inline void ReqInfoBase::unsafe_arena_set_allocated_get_photo_req(
    ::ssp::GetPhotoReq* get_photo_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_photo_req_);
  }
  get_photo_req_ = get_photo_req;
  if (get_photo_req) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.ReqInfoBase.get_photo_req)
}
inline ::ssp::GetPhotoReq* ReqInfoBase::release_get_photo_req() {
  _has_bits_[0] &= ~0x00000200u;
  ::ssp::GetPhotoReq* temp = get_photo_req_;
  get_photo_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::GetPhotoReq* ReqInfoBase::unsafe_arena_release_get_photo_req() {
  // @@protoc_insertion_point(field_release:ssp.ReqInfoBase.get_photo_req)
  _has_bits_[0] &= ~0x00000200u;
  ::ssp::GetPhotoReq* temp = get_photo_req_;
  get_photo_req_ = nullptr;
  return temp;
}
inline ::ssp::GetPhotoReq* ReqInfoBase::_internal_mutable_get_photo_req() {
  _has_bits_[0] |= 0x00000200u;
  if (get_photo_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::GetPhotoReq>(GetArenaForAllocation());
    get_photo_req_ = p;
  }
  return get_photo_req_;
}
inline ::ssp::GetPhotoReq* ReqInfoBase::mutable_get_photo_req() {
  ::ssp::GetPhotoReq* _msg = _internal_mutable_get_photo_req();
  // @@protoc_insertion_point(field_mutable:ssp.ReqInfoBase.get_photo_req)
  return _msg;
}
inline void ReqInfoBase::set_allocated_get_photo_req(::ssp::GetPhotoReq* get_photo_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete get_photo_req_;
  }
  if (get_photo_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::GetPhotoReq>::GetOwningArena(get_photo_req);
    if (message_arena != submessage_arena) {
      get_photo_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_photo_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  get_photo_req_ = get_photo_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.ReqInfoBase.get_photo_req)
}

// optional .ssp.DeleteMessageReq delete_mess_req = 13;
inline bool ReqInfoBase::_internal_has_delete_mess_req() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || delete_mess_req_ != nullptr);
  return value;
}
inline bool ReqInfoBase::has_delete_mess_req() const {
  return _internal_has_delete_mess_req();
}
inline void ReqInfoBase::clear_delete_mess_req() {
  if (delete_mess_req_ != nullptr) delete_mess_req_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::ssp::DeleteMessageReq& ReqInfoBase::_internal_delete_mess_req() const {
  const ::ssp::DeleteMessageReq* p = delete_mess_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::DeleteMessageReq&>(
      ::ssp::_DeleteMessageReq_default_instance_);
}
inline const ::ssp::DeleteMessageReq& ReqInfoBase::delete_mess_req() const {
  // @@protoc_insertion_point(field_get:ssp.ReqInfoBase.delete_mess_req)
  return _internal_delete_mess_req();
}
inline void ReqInfoBase::unsafe_arena_set_allocated_delete_mess_req(
    ::ssp::DeleteMessageReq* delete_mess_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_mess_req_);
  }
  delete_mess_req_ = delete_mess_req;
  if (delete_mess_req) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.ReqInfoBase.delete_mess_req)
}
inline ::ssp::DeleteMessageReq* ReqInfoBase::release_delete_mess_req() {
  _has_bits_[0] &= ~0x00000400u;
  ::ssp::DeleteMessageReq* temp = delete_mess_req_;
  delete_mess_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::DeleteMessageReq* ReqInfoBase::unsafe_arena_release_delete_mess_req() {
  // @@protoc_insertion_point(field_release:ssp.ReqInfoBase.delete_mess_req)
  _has_bits_[0] &= ~0x00000400u;
  ::ssp::DeleteMessageReq* temp = delete_mess_req_;
  delete_mess_req_ = nullptr;
  return temp;
}
inline ::ssp::DeleteMessageReq* ReqInfoBase::_internal_mutable_delete_mess_req() {
  _has_bits_[0] |= 0x00000400u;
  if (delete_mess_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::DeleteMessageReq>(GetArenaForAllocation());
    delete_mess_req_ = p;
  }
  return delete_mess_req_;
}
inline ::ssp::DeleteMessageReq* ReqInfoBase::mutable_delete_mess_req() {
  ::ssp::DeleteMessageReq* _msg = _internal_mutable_delete_mess_req();
  // @@protoc_insertion_point(field_mutable:ssp.ReqInfoBase.delete_mess_req)
  return _msg;
}
inline void ReqInfoBase::set_allocated_delete_mess_req(::ssp::DeleteMessageReq* delete_mess_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete delete_mess_req_;
  }
  if (delete_mess_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::DeleteMessageReq>::GetOwningArena(delete_mess_req);
    if (message_arena != submessage_arena) {
      delete_mess_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_mess_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  delete_mess_req_ = delete_mess_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.ReqInfoBase.delete_mess_req)
}

// optional .ssp.DeleteUserReq delete_user_req = 14;
inline bool ReqInfoBase::_internal_has_delete_user_req() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || delete_user_req_ != nullptr);
  return value;
}
inline bool ReqInfoBase::has_delete_user_req() const {
  return _internal_has_delete_user_req();
}
inline void ReqInfoBase::clear_delete_user_req() {
  if (delete_user_req_ != nullptr) delete_user_req_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::ssp::DeleteUserReq& ReqInfoBase::_internal_delete_user_req() const {
  const ::ssp::DeleteUserReq* p = delete_user_req_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::DeleteUserReq&>(
      ::ssp::_DeleteUserReq_default_instance_);
}
inline const ::ssp::DeleteUserReq& ReqInfoBase::delete_user_req() const {
  // @@protoc_insertion_point(field_get:ssp.ReqInfoBase.delete_user_req)
  return _internal_delete_user_req();
}
inline void ReqInfoBase::unsafe_arena_set_allocated_delete_user_req(
    ::ssp::DeleteUserReq* delete_user_req) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_user_req_);
  }
  delete_user_req_ = delete_user_req;
  if (delete_user_req) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.ReqInfoBase.delete_user_req)
}
inline ::ssp::DeleteUserReq* ReqInfoBase::release_delete_user_req() {
  _has_bits_[0] &= ~0x00000800u;
  ::ssp::DeleteUserReq* temp = delete_user_req_;
  delete_user_req_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::DeleteUserReq* ReqInfoBase::unsafe_arena_release_delete_user_req() {
  // @@protoc_insertion_point(field_release:ssp.ReqInfoBase.delete_user_req)
  _has_bits_[0] &= ~0x00000800u;
  ::ssp::DeleteUserReq* temp = delete_user_req_;
  delete_user_req_ = nullptr;
  return temp;
}
inline ::ssp::DeleteUserReq* ReqInfoBase::_internal_mutable_delete_user_req() {
  _has_bits_[0] |= 0x00000800u;
  if (delete_user_req_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::DeleteUserReq>(GetArenaForAllocation());
    delete_user_req_ = p;
  }
  return delete_user_req_;
}
inline ::ssp::DeleteUserReq* ReqInfoBase::mutable_delete_user_req() {
  ::ssp::DeleteUserReq* _msg = _internal_mutable_delete_user_req();
  // @@protoc_insertion_point(field_mutable:ssp.ReqInfoBase.delete_user_req)
  return _msg;
}
inline void ReqInfoBase::set_allocated_delete_user_req(::ssp::DeleteUserReq* delete_user_req) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete delete_user_req_;
  }
  if (delete_user_req) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::DeleteUserReq>::GetOwningArena(delete_user_req);
    if (message_arena != submessage_arena) {
      delete_user_req = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_user_req, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  delete_user_req_ = delete_user_req;
  // @@protoc_insertion_point(field_set_allocated:ssp.ReqInfoBase.delete_user_req)
}

// -------------------------------------------------------------------

// RspInfoBase

// optional int32 ver = 1;
inline bool RspInfoBase::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RspInfoBase::has_ver() const {
  return _internal_has_ver();
}
inline void RspInfoBase::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline int32_t RspInfoBase::_internal_ver() const {
  return ver_;
}
inline int32_t RspInfoBase::ver() const {
  // @@protoc_insertion_point(field_get:ssp.RspInfoBase.ver)
  return _internal_ver();
}
inline void RspInfoBase::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00001000u;
  ver_ = value;
}
inline void RspInfoBase::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.RspInfoBase.ver)
}

// optional int32 mess_type = 2;
inline bool RspInfoBase::_internal_has_mess_type() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool RspInfoBase::has_mess_type() const {
  return _internal_has_mess_type();
}
inline void RspInfoBase::clear_mess_type() {
  mess_type_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline int32_t RspInfoBase::_internal_mess_type() const {
  return mess_type_;
}
inline int32_t RspInfoBase::mess_type() const {
  // @@protoc_insertion_point(field_get:ssp.RspInfoBase.mess_type)
  return _internal_mess_type();
}
inline void RspInfoBase::_internal_set_mess_type(int32_t value) {
  _has_bits_[0] |= 0x00002000u;
  mess_type_ = value;
}
inline void RspInfoBase::set_mess_type(int32_t value) {
  _internal_set_mess_type(value);
  // @@protoc_insertion_point(field_set:ssp.RspInfoBase.mess_type)
}

// optional .ssp.RegRsp reg_rsp = 3;
inline bool RspInfoBase::_internal_has_reg_rsp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || reg_rsp_ != nullptr);
  return value;
}
inline bool RspInfoBase::has_reg_rsp() const {
  return _internal_has_reg_rsp();
}
inline void RspInfoBase::clear_reg_rsp() {
  if (reg_rsp_ != nullptr) reg_rsp_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssp::RegRsp& RspInfoBase::_internal_reg_rsp() const {
  const ::ssp::RegRsp* p = reg_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::RegRsp&>(
      ::ssp::_RegRsp_default_instance_);
}
inline const ::ssp::RegRsp& RspInfoBase::reg_rsp() const {
  // @@protoc_insertion_point(field_get:ssp.RspInfoBase.reg_rsp)
  return _internal_reg_rsp();
}
inline void RspInfoBase::unsafe_arena_set_allocated_reg_rsp(
    ::ssp::RegRsp* reg_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reg_rsp_);
  }
  reg_rsp_ = reg_rsp;
  if (reg_rsp) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.RspInfoBase.reg_rsp)
}
inline ::ssp::RegRsp* RspInfoBase::release_reg_rsp() {
  _has_bits_[0] &= ~0x00000001u;
  ::ssp::RegRsp* temp = reg_rsp_;
  reg_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::RegRsp* RspInfoBase::unsafe_arena_release_reg_rsp() {
  // @@protoc_insertion_point(field_release:ssp.RspInfoBase.reg_rsp)
  _has_bits_[0] &= ~0x00000001u;
  ::ssp::RegRsp* temp = reg_rsp_;
  reg_rsp_ = nullptr;
  return temp;
}
inline ::ssp::RegRsp* RspInfoBase::_internal_mutable_reg_rsp() {
  _has_bits_[0] |= 0x00000001u;
  if (reg_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::RegRsp>(GetArenaForAllocation());
    reg_rsp_ = p;
  }
  return reg_rsp_;
}
inline ::ssp::RegRsp* RspInfoBase::mutable_reg_rsp() {
  ::ssp::RegRsp* _msg = _internal_mutable_reg_rsp();
  // @@protoc_insertion_point(field_mutable:ssp.RspInfoBase.reg_rsp)
  return _msg;
}
inline void RspInfoBase::set_allocated_reg_rsp(::ssp::RegRsp* reg_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reg_rsp_;
  }
  if (reg_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::RegRsp>::GetOwningArena(reg_rsp);
    if (message_arena != submessage_arena) {
      reg_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reg_rsp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  reg_rsp_ = reg_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.RspInfoBase.reg_rsp)
}

// optional .ssp.LoginRsp login_rsp = 4;
inline bool RspInfoBase::_internal_has_login_rsp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || login_rsp_ != nullptr);
  return value;
}
inline bool RspInfoBase::has_login_rsp() const {
  return _internal_has_login_rsp();
}
inline void RspInfoBase::clear_login_rsp() {
  if (login_rsp_ != nullptr) login_rsp_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::ssp::LoginRsp& RspInfoBase::_internal_login_rsp() const {
  const ::ssp::LoginRsp* p = login_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::LoginRsp&>(
      ::ssp::_LoginRsp_default_instance_);
}
inline const ::ssp::LoginRsp& RspInfoBase::login_rsp() const {
  // @@protoc_insertion_point(field_get:ssp.RspInfoBase.login_rsp)
  return _internal_login_rsp();
}
inline void RspInfoBase::unsafe_arena_set_allocated_login_rsp(
    ::ssp::LoginRsp* login_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(login_rsp_);
  }
  login_rsp_ = login_rsp;
  if (login_rsp) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.RspInfoBase.login_rsp)
}
inline ::ssp::LoginRsp* RspInfoBase::release_login_rsp() {
  _has_bits_[0] &= ~0x00000002u;
  ::ssp::LoginRsp* temp = login_rsp_;
  login_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::LoginRsp* RspInfoBase::unsafe_arena_release_login_rsp() {
  // @@protoc_insertion_point(field_release:ssp.RspInfoBase.login_rsp)
  _has_bits_[0] &= ~0x00000002u;
  ::ssp::LoginRsp* temp = login_rsp_;
  login_rsp_ = nullptr;
  return temp;
}
inline ::ssp::LoginRsp* RspInfoBase::_internal_mutable_login_rsp() {
  _has_bits_[0] |= 0x00000002u;
  if (login_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::LoginRsp>(GetArenaForAllocation());
    login_rsp_ = p;
  }
  return login_rsp_;
}
inline ::ssp::LoginRsp* RspInfoBase::mutable_login_rsp() {
  ::ssp::LoginRsp* _msg = _internal_mutable_login_rsp();
  // @@protoc_insertion_point(field_mutable:ssp.RspInfoBase.login_rsp)
  return _msg;
}
inline void RspInfoBase::set_allocated_login_rsp(::ssp::LoginRsp* login_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete login_rsp_;
  }
  if (login_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::LoginRsp>::GetOwningArena(login_rsp);
    if (message_arena != submessage_arena) {
      login_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, login_rsp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  login_rsp_ = login_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.RspInfoBase.login_rsp)
}

// optional .ssp.LogoutRsp logout_rsp = 5;
inline bool RspInfoBase::_internal_has_logout_rsp() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || logout_rsp_ != nullptr);
  return value;
}
inline bool RspInfoBase::has_logout_rsp() const {
  return _internal_has_logout_rsp();
}
inline void RspInfoBase::clear_logout_rsp() {
  if (logout_rsp_ != nullptr) logout_rsp_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::ssp::LogoutRsp& RspInfoBase::_internal_logout_rsp() const {
  const ::ssp::LogoutRsp* p = logout_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::LogoutRsp&>(
      ::ssp::_LogoutRsp_default_instance_);
}
inline const ::ssp::LogoutRsp& RspInfoBase::logout_rsp() const {
  // @@protoc_insertion_point(field_get:ssp.RspInfoBase.logout_rsp)
  return _internal_logout_rsp();
}
inline void RspInfoBase::unsafe_arena_set_allocated_logout_rsp(
    ::ssp::LogoutRsp* logout_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(logout_rsp_);
  }
  logout_rsp_ = logout_rsp;
  if (logout_rsp) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.RspInfoBase.logout_rsp)
}
inline ::ssp::LogoutRsp* RspInfoBase::release_logout_rsp() {
  _has_bits_[0] &= ~0x00000004u;
  ::ssp::LogoutRsp* temp = logout_rsp_;
  logout_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::LogoutRsp* RspInfoBase::unsafe_arena_release_logout_rsp() {
  // @@protoc_insertion_point(field_release:ssp.RspInfoBase.logout_rsp)
  _has_bits_[0] &= ~0x00000004u;
  ::ssp::LogoutRsp* temp = logout_rsp_;
  logout_rsp_ = nullptr;
  return temp;
}
inline ::ssp::LogoutRsp* RspInfoBase::_internal_mutable_logout_rsp() {
  _has_bits_[0] |= 0x00000004u;
  if (logout_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::LogoutRsp>(GetArenaForAllocation());
    logout_rsp_ = p;
  }
  return logout_rsp_;
}
inline ::ssp::LogoutRsp* RspInfoBase::mutable_logout_rsp() {
  ::ssp::LogoutRsp* _msg = _internal_mutable_logout_rsp();
  // @@protoc_insertion_point(field_mutable:ssp.RspInfoBase.logout_rsp)
  return _msg;
}
inline void RspInfoBase::set_allocated_logout_rsp(::ssp::LogoutRsp* logout_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete logout_rsp_;
  }
  if (logout_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::LogoutRsp>::GetOwningArena(logout_rsp);
    if (message_arena != submessage_arena) {
      logout_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logout_rsp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  logout_rsp_ = logout_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.RspInfoBase.logout_rsp)
}

// optional .ssp.GetMessageRsp get_mess_rsp = 6;
inline bool RspInfoBase::_internal_has_get_mess_rsp() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || get_mess_rsp_ != nullptr);
  return value;
}
inline bool RspInfoBase::has_get_mess_rsp() const {
  return _internal_has_get_mess_rsp();
}
inline void RspInfoBase::clear_get_mess_rsp() {
  if (get_mess_rsp_ != nullptr) get_mess_rsp_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::ssp::GetMessageRsp& RspInfoBase::_internal_get_mess_rsp() const {
  const ::ssp::GetMessageRsp* p = get_mess_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::GetMessageRsp&>(
      ::ssp::_GetMessageRsp_default_instance_);
}
inline const ::ssp::GetMessageRsp& RspInfoBase::get_mess_rsp() const {
  // @@protoc_insertion_point(field_get:ssp.RspInfoBase.get_mess_rsp)
  return _internal_get_mess_rsp();
}
inline void RspInfoBase::unsafe_arena_set_allocated_get_mess_rsp(
    ::ssp::GetMessageRsp* get_mess_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_mess_rsp_);
  }
  get_mess_rsp_ = get_mess_rsp;
  if (get_mess_rsp) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.RspInfoBase.get_mess_rsp)
}
inline ::ssp::GetMessageRsp* RspInfoBase::release_get_mess_rsp() {
  _has_bits_[0] &= ~0x00000008u;
  ::ssp::GetMessageRsp* temp = get_mess_rsp_;
  get_mess_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::GetMessageRsp* RspInfoBase::unsafe_arena_release_get_mess_rsp() {
  // @@protoc_insertion_point(field_release:ssp.RspInfoBase.get_mess_rsp)
  _has_bits_[0] &= ~0x00000008u;
  ::ssp::GetMessageRsp* temp = get_mess_rsp_;
  get_mess_rsp_ = nullptr;
  return temp;
}
inline ::ssp::GetMessageRsp* RspInfoBase::_internal_mutable_get_mess_rsp() {
  _has_bits_[0] |= 0x00000008u;
  if (get_mess_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::GetMessageRsp>(GetArenaForAllocation());
    get_mess_rsp_ = p;
  }
  return get_mess_rsp_;
}
inline ::ssp::GetMessageRsp* RspInfoBase::mutable_get_mess_rsp() {
  ::ssp::GetMessageRsp* _msg = _internal_mutable_get_mess_rsp();
  // @@protoc_insertion_point(field_mutable:ssp.RspInfoBase.get_mess_rsp)
  return _msg;
}
inline void RspInfoBase::set_allocated_get_mess_rsp(::ssp::GetMessageRsp* get_mess_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete get_mess_rsp_;
  }
  if (get_mess_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::GetMessageRsp>::GetOwningArena(get_mess_rsp);
    if (message_arena != submessage_arena) {
      get_mess_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_mess_rsp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  get_mess_rsp_ = get_mess_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.RspInfoBase.get_mess_rsp)
}

// optional .ssp.PublishMessageRsp publish_mess_rsp = 7;
inline bool RspInfoBase::_internal_has_publish_mess_rsp() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || publish_mess_rsp_ != nullptr);
  return value;
}
inline bool RspInfoBase::has_publish_mess_rsp() const {
  return _internal_has_publish_mess_rsp();
}
inline void RspInfoBase::clear_publish_mess_rsp() {
  if (publish_mess_rsp_ != nullptr) publish_mess_rsp_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::ssp::PublishMessageRsp& RspInfoBase::_internal_publish_mess_rsp() const {
  const ::ssp::PublishMessageRsp* p = publish_mess_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::PublishMessageRsp&>(
      ::ssp::_PublishMessageRsp_default_instance_);
}
inline const ::ssp::PublishMessageRsp& RspInfoBase::publish_mess_rsp() const {
  // @@protoc_insertion_point(field_get:ssp.RspInfoBase.publish_mess_rsp)
  return _internal_publish_mess_rsp();
}
inline void RspInfoBase::unsafe_arena_set_allocated_publish_mess_rsp(
    ::ssp::PublishMessageRsp* publish_mess_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(publish_mess_rsp_);
  }
  publish_mess_rsp_ = publish_mess_rsp;
  if (publish_mess_rsp) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.RspInfoBase.publish_mess_rsp)
}
inline ::ssp::PublishMessageRsp* RspInfoBase::release_publish_mess_rsp() {
  _has_bits_[0] &= ~0x00000010u;
  ::ssp::PublishMessageRsp* temp = publish_mess_rsp_;
  publish_mess_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::PublishMessageRsp* RspInfoBase::unsafe_arena_release_publish_mess_rsp() {
  // @@protoc_insertion_point(field_release:ssp.RspInfoBase.publish_mess_rsp)
  _has_bits_[0] &= ~0x00000010u;
  ::ssp::PublishMessageRsp* temp = publish_mess_rsp_;
  publish_mess_rsp_ = nullptr;
  return temp;
}
inline ::ssp::PublishMessageRsp* RspInfoBase::_internal_mutable_publish_mess_rsp() {
  _has_bits_[0] |= 0x00000010u;
  if (publish_mess_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::PublishMessageRsp>(GetArenaForAllocation());
    publish_mess_rsp_ = p;
  }
  return publish_mess_rsp_;
}
inline ::ssp::PublishMessageRsp* RspInfoBase::mutable_publish_mess_rsp() {
  ::ssp::PublishMessageRsp* _msg = _internal_mutable_publish_mess_rsp();
  // @@protoc_insertion_point(field_mutable:ssp.RspInfoBase.publish_mess_rsp)
  return _msg;
}
inline void RspInfoBase::set_allocated_publish_mess_rsp(::ssp::PublishMessageRsp* publish_mess_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete publish_mess_rsp_;
  }
  if (publish_mess_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::PublishMessageRsp>::GetOwningArena(publish_mess_rsp);
    if (message_arena != submessage_arena) {
      publish_mess_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, publish_mess_rsp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  publish_mess_rsp_ = publish_mess_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.RspInfoBase.publish_mess_rsp)
}

// optional .ssp.AddFriendRsp add_friend_rsp = 8;
inline bool RspInfoBase::_internal_has_add_friend_rsp() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || add_friend_rsp_ != nullptr);
  return value;
}
inline bool RspInfoBase::has_add_friend_rsp() const {
  return _internal_has_add_friend_rsp();
}
inline void RspInfoBase::clear_add_friend_rsp() {
  if (add_friend_rsp_ != nullptr) add_friend_rsp_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::ssp::AddFriendRsp& RspInfoBase::_internal_add_friend_rsp() const {
  const ::ssp::AddFriendRsp* p = add_friend_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::AddFriendRsp&>(
      ::ssp::_AddFriendRsp_default_instance_);
}
inline const ::ssp::AddFriendRsp& RspInfoBase::add_friend_rsp() const {
  // @@protoc_insertion_point(field_get:ssp.RspInfoBase.add_friend_rsp)
  return _internal_add_friend_rsp();
}
inline void RspInfoBase::unsafe_arena_set_allocated_add_friend_rsp(
    ::ssp::AddFriendRsp* add_friend_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_friend_rsp_);
  }
  add_friend_rsp_ = add_friend_rsp;
  if (add_friend_rsp) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.RspInfoBase.add_friend_rsp)
}
inline ::ssp::AddFriendRsp* RspInfoBase::release_add_friend_rsp() {
  _has_bits_[0] &= ~0x00000020u;
  ::ssp::AddFriendRsp* temp = add_friend_rsp_;
  add_friend_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::AddFriendRsp* RspInfoBase::unsafe_arena_release_add_friend_rsp() {
  // @@protoc_insertion_point(field_release:ssp.RspInfoBase.add_friend_rsp)
  _has_bits_[0] &= ~0x00000020u;
  ::ssp::AddFriendRsp* temp = add_friend_rsp_;
  add_friend_rsp_ = nullptr;
  return temp;
}
inline ::ssp::AddFriendRsp* RspInfoBase::_internal_mutable_add_friend_rsp() {
  _has_bits_[0] |= 0x00000020u;
  if (add_friend_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::AddFriendRsp>(GetArenaForAllocation());
    add_friend_rsp_ = p;
  }
  return add_friend_rsp_;
}
inline ::ssp::AddFriendRsp* RspInfoBase::mutable_add_friend_rsp() {
  ::ssp::AddFriendRsp* _msg = _internal_mutable_add_friend_rsp();
  // @@protoc_insertion_point(field_mutable:ssp.RspInfoBase.add_friend_rsp)
  return _msg;
}
inline void RspInfoBase::set_allocated_add_friend_rsp(::ssp::AddFriendRsp* add_friend_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_friend_rsp_;
  }
  if (add_friend_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::AddFriendRsp>::GetOwningArena(add_friend_rsp);
    if (message_arena != submessage_arena) {
      add_friend_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_friend_rsp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  add_friend_rsp_ = add_friend_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.RspInfoBase.add_friend_rsp)
}

// optional .ssp.AddBlackRsp add_black_rsp = 9;
inline bool RspInfoBase::_internal_has_add_black_rsp() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || add_black_rsp_ != nullptr);
  return value;
}
inline bool RspInfoBase::has_add_black_rsp() const {
  return _internal_has_add_black_rsp();
}
inline void RspInfoBase::clear_add_black_rsp() {
  if (add_black_rsp_ != nullptr) add_black_rsp_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::ssp::AddBlackRsp& RspInfoBase::_internal_add_black_rsp() const {
  const ::ssp::AddBlackRsp* p = add_black_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::AddBlackRsp&>(
      ::ssp::_AddBlackRsp_default_instance_);
}
inline const ::ssp::AddBlackRsp& RspInfoBase::add_black_rsp() const {
  // @@protoc_insertion_point(field_get:ssp.RspInfoBase.add_black_rsp)
  return _internal_add_black_rsp();
}
inline void RspInfoBase::unsafe_arena_set_allocated_add_black_rsp(
    ::ssp::AddBlackRsp* add_black_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(add_black_rsp_);
  }
  add_black_rsp_ = add_black_rsp;
  if (add_black_rsp) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.RspInfoBase.add_black_rsp)
}
inline ::ssp::AddBlackRsp* RspInfoBase::release_add_black_rsp() {
  _has_bits_[0] &= ~0x00000040u;
  ::ssp::AddBlackRsp* temp = add_black_rsp_;
  add_black_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::AddBlackRsp* RspInfoBase::unsafe_arena_release_add_black_rsp() {
  // @@protoc_insertion_point(field_release:ssp.RspInfoBase.add_black_rsp)
  _has_bits_[0] &= ~0x00000040u;
  ::ssp::AddBlackRsp* temp = add_black_rsp_;
  add_black_rsp_ = nullptr;
  return temp;
}
inline ::ssp::AddBlackRsp* RspInfoBase::_internal_mutable_add_black_rsp() {
  _has_bits_[0] |= 0x00000040u;
  if (add_black_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::AddBlackRsp>(GetArenaForAllocation());
    add_black_rsp_ = p;
  }
  return add_black_rsp_;
}
inline ::ssp::AddBlackRsp* RspInfoBase::mutable_add_black_rsp() {
  ::ssp::AddBlackRsp* _msg = _internal_mutable_add_black_rsp();
  // @@protoc_insertion_point(field_mutable:ssp.RspInfoBase.add_black_rsp)
  return _msg;
}
inline void RspInfoBase::set_allocated_add_black_rsp(::ssp::AddBlackRsp* add_black_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete add_black_rsp_;
  }
  if (add_black_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::AddBlackRsp>::GetOwningArena(add_black_rsp);
    if (message_arena != submessage_arena) {
      add_black_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_black_rsp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  add_black_rsp_ = add_black_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.RspInfoBase.add_black_rsp)
}

// optional .ssp.DelFriendRsp del_friend_rsp = 10;
inline bool RspInfoBase::_internal_has_del_friend_rsp() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || del_friend_rsp_ != nullptr);
  return value;
}
inline bool RspInfoBase::has_del_friend_rsp() const {
  return _internal_has_del_friend_rsp();
}
inline void RspInfoBase::clear_del_friend_rsp() {
  if (del_friend_rsp_ != nullptr) del_friend_rsp_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::ssp::DelFriendRsp& RspInfoBase::_internal_del_friend_rsp() const {
  const ::ssp::DelFriendRsp* p = del_friend_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::DelFriendRsp&>(
      ::ssp::_DelFriendRsp_default_instance_);
}
inline const ::ssp::DelFriendRsp& RspInfoBase::del_friend_rsp() const {
  // @@protoc_insertion_point(field_get:ssp.RspInfoBase.del_friend_rsp)
  return _internal_del_friend_rsp();
}
inline void RspInfoBase::unsafe_arena_set_allocated_del_friend_rsp(
    ::ssp::DelFriendRsp* del_friend_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(del_friend_rsp_);
  }
  del_friend_rsp_ = del_friend_rsp;
  if (del_friend_rsp) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.RspInfoBase.del_friend_rsp)
}
inline ::ssp::DelFriendRsp* RspInfoBase::release_del_friend_rsp() {
  _has_bits_[0] &= ~0x00000080u;
  ::ssp::DelFriendRsp* temp = del_friend_rsp_;
  del_friend_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::DelFriendRsp* RspInfoBase::unsafe_arena_release_del_friend_rsp() {
  // @@protoc_insertion_point(field_release:ssp.RspInfoBase.del_friend_rsp)
  _has_bits_[0] &= ~0x00000080u;
  ::ssp::DelFriendRsp* temp = del_friend_rsp_;
  del_friend_rsp_ = nullptr;
  return temp;
}
inline ::ssp::DelFriendRsp* RspInfoBase::_internal_mutable_del_friend_rsp() {
  _has_bits_[0] |= 0x00000080u;
  if (del_friend_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::DelFriendRsp>(GetArenaForAllocation());
    del_friend_rsp_ = p;
  }
  return del_friend_rsp_;
}
inline ::ssp::DelFriendRsp* RspInfoBase::mutable_del_friend_rsp() {
  ::ssp::DelFriendRsp* _msg = _internal_mutable_del_friend_rsp();
  // @@protoc_insertion_point(field_mutable:ssp.RspInfoBase.del_friend_rsp)
  return _msg;
}
inline void RspInfoBase::set_allocated_del_friend_rsp(::ssp::DelFriendRsp* del_friend_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete del_friend_rsp_;
  }
  if (del_friend_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::DelFriendRsp>::GetOwningArena(del_friend_rsp);
    if (message_arena != submessage_arena) {
      del_friend_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, del_friend_rsp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  del_friend_rsp_ = del_friend_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.RspInfoBase.del_friend_rsp)
}

// optional .ssp.DelBlackRsp del_black_rsp = 11;
inline bool RspInfoBase::_internal_has_del_black_rsp() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || del_black_rsp_ != nullptr);
  return value;
}
inline bool RspInfoBase::has_del_black_rsp() const {
  return _internal_has_del_black_rsp();
}
inline void RspInfoBase::clear_del_black_rsp() {
  if (del_black_rsp_ != nullptr) del_black_rsp_->Clear();
  _has_bits_[0] &= ~0x00000100u;
}
inline const ::ssp::DelBlackRsp& RspInfoBase::_internal_del_black_rsp() const {
  const ::ssp::DelBlackRsp* p = del_black_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::DelBlackRsp&>(
      ::ssp::_DelBlackRsp_default_instance_);
}
inline const ::ssp::DelBlackRsp& RspInfoBase::del_black_rsp() const {
  // @@protoc_insertion_point(field_get:ssp.RspInfoBase.del_black_rsp)
  return _internal_del_black_rsp();
}
inline void RspInfoBase::unsafe_arena_set_allocated_del_black_rsp(
    ::ssp::DelBlackRsp* del_black_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(del_black_rsp_);
  }
  del_black_rsp_ = del_black_rsp;
  if (del_black_rsp) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.RspInfoBase.del_black_rsp)
}
inline ::ssp::DelBlackRsp* RspInfoBase::release_del_black_rsp() {
  _has_bits_[0] &= ~0x00000100u;
  ::ssp::DelBlackRsp* temp = del_black_rsp_;
  del_black_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::DelBlackRsp* RspInfoBase::unsafe_arena_release_del_black_rsp() {
  // @@protoc_insertion_point(field_release:ssp.RspInfoBase.del_black_rsp)
  _has_bits_[0] &= ~0x00000100u;
  ::ssp::DelBlackRsp* temp = del_black_rsp_;
  del_black_rsp_ = nullptr;
  return temp;
}
inline ::ssp::DelBlackRsp* RspInfoBase::_internal_mutable_del_black_rsp() {
  _has_bits_[0] |= 0x00000100u;
  if (del_black_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::DelBlackRsp>(GetArenaForAllocation());
    del_black_rsp_ = p;
  }
  return del_black_rsp_;
}
inline ::ssp::DelBlackRsp* RspInfoBase::mutable_del_black_rsp() {
  ::ssp::DelBlackRsp* _msg = _internal_mutable_del_black_rsp();
  // @@protoc_insertion_point(field_mutable:ssp.RspInfoBase.del_black_rsp)
  return _msg;
}
inline void RspInfoBase::set_allocated_del_black_rsp(::ssp::DelBlackRsp* del_black_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete del_black_rsp_;
  }
  if (del_black_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::DelBlackRsp>::GetOwningArena(del_black_rsp);
    if (message_arena != submessage_arena) {
      del_black_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, del_black_rsp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  del_black_rsp_ = del_black_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.RspInfoBase.del_black_rsp)
}

// optional .ssp.GetPhotoRsp get_photo_rsp = 12;
inline bool RspInfoBase::_internal_has_get_photo_rsp() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || get_photo_rsp_ != nullptr);
  return value;
}
inline bool RspInfoBase::has_get_photo_rsp() const {
  return _internal_has_get_photo_rsp();
}
inline void RspInfoBase::clear_get_photo_rsp() {
  if (get_photo_rsp_ != nullptr) get_photo_rsp_->Clear();
  _has_bits_[0] &= ~0x00000200u;
}
inline const ::ssp::GetPhotoRsp& RspInfoBase::_internal_get_photo_rsp() const {
  const ::ssp::GetPhotoRsp* p = get_photo_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::GetPhotoRsp&>(
      ::ssp::_GetPhotoRsp_default_instance_);
}
inline const ::ssp::GetPhotoRsp& RspInfoBase::get_photo_rsp() const {
  // @@protoc_insertion_point(field_get:ssp.RspInfoBase.get_photo_rsp)
  return _internal_get_photo_rsp();
}
inline void RspInfoBase::unsafe_arena_set_allocated_get_photo_rsp(
    ::ssp::GetPhotoRsp* get_photo_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(get_photo_rsp_);
  }
  get_photo_rsp_ = get_photo_rsp;
  if (get_photo_rsp) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.RspInfoBase.get_photo_rsp)
}
inline ::ssp::GetPhotoRsp* RspInfoBase::release_get_photo_rsp() {
  _has_bits_[0] &= ~0x00000200u;
  ::ssp::GetPhotoRsp* temp = get_photo_rsp_;
  get_photo_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::GetPhotoRsp* RspInfoBase::unsafe_arena_release_get_photo_rsp() {
  // @@protoc_insertion_point(field_release:ssp.RspInfoBase.get_photo_rsp)
  _has_bits_[0] &= ~0x00000200u;
  ::ssp::GetPhotoRsp* temp = get_photo_rsp_;
  get_photo_rsp_ = nullptr;
  return temp;
}
inline ::ssp::GetPhotoRsp* RspInfoBase::_internal_mutable_get_photo_rsp() {
  _has_bits_[0] |= 0x00000200u;
  if (get_photo_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::GetPhotoRsp>(GetArenaForAllocation());
    get_photo_rsp_ = p;
  }
  return get_photo_rsp_;
}
inline ::ssp::GetPhotoRsp* RspInfoBase::mutable_get_photo_rsp() {
  ::ssp::GetPhotoRsp* _msg = _internal_mutable_get_photo_rsp();
  // @@protoc_insertion_point(field_mutable:ssp.RspInfoBase.get_photo_rsp)
  return _msg;
}
inline void RspInfoBase::set_allocated_get_photo_rsp(::ssp::GetPhotoRsp* get_photo_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete get_photo_rsp_;
  }
  if (get_photo_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::GetPhotoRsp>::GetOwningArena(get_photo_rsp);
    if (message_arena != submessage_arena) {
      get_photo_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_photo_rsp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  get_photo_rsp_ = get_photo_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.RspInfoBase.get_photo_rsp)
}

// optional .ssp.DeleteMessageRsp delete_mess_rsp = 13;
inline bool RspInfoBase::_internal_has_delete_mess_rsp() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || delete_mess_rsp_ != nullptr);
  return value;
}
inline bool RspInfoBase::has_delete_mess_rsp() const {
  return _internal_has_delete_mess_rsp();
}
inline void RspInfoBase::clear_delete_mess_rsp() {
  if (delete_mess_rsp_ != nullptr) delete_mess_rsp_->Clear();
  _has_bits_[0] &= ~0x00000400u;
}
inline const ::ssp::DeleteMessageRsp& RspInfoBase::_internal_delete_mess_rsp() const {
  const ::ssp::DeleteMessageRsp* p = delete_mess_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::DeleteMessageRsp&>(
      ::ssp::_DeleteMessageRsp_default_instance_);
}
inline const ::ssp::DeleteMessageRsp& RspInfoBase::delete_mess_rsp() const {
  // @@protoc_insertion_point(field_get:ssp.RspInfoBase.delete_mess_rsp)
  return _internal_delete_mess_rsp();
}
inline void RspInfoBase::unsafe_arena_set_allocated_delete_mess_rsp(
    ::ssp::DeleteMessageRsp* delete_mess_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_mess_rsp_);
  }
  delete_mess_rsp_ = delete_mess_rsp;
  if (delete_mess_rsp) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.RspInfoBase.delete_mess_rsp)
}
inline ::ssp::DeleteMessageRsp* RspInfoBase::release_delete_mess_rsp() {
  _has_bits_[0] &= ~0x00000400u;
  ::ssp::DeleteMessageRsp* temp = delete_mess_rsp_;
  delete_mess_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::DeleteMessageRsp* RspInfoBase::unsafe_arena_release_delete_mess_rsp() {
  // @@protoc_insertion_point(field_release:ssp.RspInfoBase.delete_mess_rsp)
  _has_bits_[0] &= ~0x00000400u;
  ::ssp::DeleteMessageRsp* temp = delete_mess_rsp_;
  delete_mess_rsp_ = nullptr;
  return temp;
}
inline ::ssp::DeleteMessageRsp* RspInfoBase::_internal_mutable_delete_mess_rsp() {
  _has_bits_[0] |= 0x00000400u;
  if (delete_mess_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::DeleteMessageRsp>(GetArenaForAllocation());
    delete_mess_rsp_ = p;
  }
  return delete_mess_rsp_;
}
inline ::ssp::DeleteMessageRsp* RspInfoBase::mutable_delete_mess_rsp() {
  ::ssp::DeleteMessageRsp* _msg = _internal_mutable_delete_mess_rsp();
  // @@protoc_insertion_point(field_mutable:ssp.RspInfoBase.delete_mess_rsp)
  return _msg;
}
inline void RspInfoBase::set_allocated_delete_mess_rsp(::ssp::DeleteMessageRsp* delete_mess_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete delete_mess_rsp_;
  }
  if (delete_mess_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::DeleteMessageRsp>::GetOwningArena(delete_mess_rsp);
    if (message_arena != submessage_arena) {
      delete_mess_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_mess_rsp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  delete_mess_rsp_ = delete_mess_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.RspInfoBase.delete_mess_rsp)
}

// optional .ssp.DeleteUserRsp delete_user_rsp = 14;
inline bool RspInfoBase::_internal_has_delete_user_rsp() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || delete_user_rsp_ != nullptr);
  return value;
}
inline bool RspInfoBase::has_delete_user_rsp() const {
  return _internal_has_delete_user_rsp();
}
inline void RspInfoBase::clear_delete_user_rsp() {
  if (delete_user_rsp_ != nullptr) delete_user_rsp_->Clear();
  _has_bits_[0] &= ~0x00000800u;
}
inline const ::ssp::DeleteUserRsp& RspInfoBase::_internal_delete_user_rsp() const {
  const ::ssp::DeleteUserRsp* p = delete_user_rsp_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::DeleteUserRsp&>(
      ::ssp::_DeleteUserRsp_default_instance_);
}
inline const ::ssp::DeleteUserRsp& RspInfoBase::delete_user_rsp() const {
  // @@protoc_insertion_point(field_get:ssp.RspInfoBase.delete_user_rsp)
  return _internal_delete_user_rsp();
}
inline void RspInfoBase::unsafe_arena_set_allocated_delete_user_rsp(
    ::ssp::DeleteUserRsp* delete_user_rsp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(delete_user_rsp_);
  }
  delete_user_rsp_ = delete_user_rsp;
  if (delete_user_rsp) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.RspInfoBase.delete_user_rsp)
}
inline ::ssp::DeleteUserRsp* RspInfoBase::release_delete_user_rsp() {
  _has_bits_[0] &= ~0x00000800u;
  ::ssp::DeleteUserRsp* temp = delete_user_rsp_;
  delete_user_rsp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::DeleteUserRsp* RspInfoBase::unsafe_arena_release_delete_user_rsp() {
  // @@protoc_insertion_point(field_release:ssp.RspInfoBase.delete_user_rsp)
  _has_bits_[0] &= ~0x00000800u;
  ::ssp::DeleteUserRsp* temp = delete_user_rsp_;
  delete_user_rsp_ = nullptr;
  return temp;
}
inline ::ssp::DeleteUserRsp* RspInfoBase::_internal_mutable_delete_user_rsp() {
  _has_bits_[0] |= 0x00000800u;
  if (delete_user_rsp_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::DeleteUserRsp>(GetArenaForAllocation());
    delete_user_rsp_ = p;
  }
  return delete_user_rsp_;
}
inline ::ssp::DeleteUserRsp* RspInfoBase::mutable_delete_user_rsp() {
  ::ssp::DeleteUserRsp* _msg = _internal_mutable_delete_user_rsp();
  // @@protoc_insertion_point(field_mutable:ssp.RspInfoBase.delete_user_rsp)
  return _msg;
}
inline void RspInfoBase::set_allocated_delete_user_rsp(::ssp::DeleteUserRsp* delete_user_rsp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete delete_user_rsp_;
  }
  if (delete_user_rsp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::DeleteUserRsp>::GetOwningArena(delete_user_rsp);
    if (message_arena != submessage_arena) {
      delete_user_rsp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_user_rsp, submessage_arena);
    }
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  delete_user_rsp_ = delete_user_rsp;
  // @@protoc_insertion_point(field_set_allocated:ssp.RspInfoBase.delete_user_rsp)
}

// -------------------------------------------------------------------

// RegReq

// optional int32 ver = 1;
inline bool RegReq::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegReq::has_ver() const {
  return _internal_has_ver();
}
inline void RegReq::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t RegReq::_internal_ver() const {
  return ver_;
}
inline int32_t RegReq::ver() const {
  // @@protoc_insertion_point(field_get:ssp.RegReq.ver)
  return _internal_ver();
}
inline void RegReq::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  ver_ = value;
}
inline void RegReq::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.RegReq.ver)
}

// optional string user_name = 3;
inline bool RegReq::_internal_has_user_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegReq::has_user_name() const {
  return _internal_has_user_name();
}
inline void RegReq::clear_user_name() {
  user_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RegReq::user_name() const {
  // @@protoc_insertion_point(field_get:ssp.RegReq.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegReq::set_user_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ssp.RegReq.user_name)
}
inline std::string* RegReq::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:ssp.RegReq.user_name)
  return _s;
}
inline const std::string& RegReq::_internal_user_name() const {
  return user_name_.Get();
}
inline void RegReq::_internal_set_user_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegReq::_internal_mutable_user_name() {
  _has_bits_[0] |= 0x00000001u;
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegReq::release_user_name() {
  // @@protoc_insertion_point(field_release:ssp.RegReq.user_name)
  if (!_internal_has_user_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = user_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegReq::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ssp.RegReq.user_name)
}

// optional string password = 4;
inline bool RegReq::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegReq::has_password() const {
  return _internal_has_password();
}
inline void RegReq::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RegReq::password() const {
  // @@protoc_insertion_point(field_get:ssp.RegReq.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RegReq::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ssp.RegReq.password)
}
inline std::string* RegReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:ssp.RegReq.password)
  return _s;
}
inline const std::string& RegReq::_internal_password() const {
  return password_.Get();
}
inline void RegReq::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RegReq::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RegReq::release_password() {
  // @@protoc_insertion_point(field_release:ssp.RegReq.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void RegReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ssp.RegReq.password)
}

// optional int32 from = 5;
inline bool RegReq::_internal_has_from() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RegReq::has_from() const {
  return _internal_has_from();
}
inline void RegReq::clear_from() {
  from_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t RegReq::_internal_from() const {
  return from_;
}
inline int32_t RegReq::from() const {
  // @@protoc_insertion_point(field_get:ssp.RegReq.from)
  return _internal_from();
}
inline void RegReq::_internal_set_from(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  from_ = value;
}
inline void RegReq::set_from(int32_t value) {
  _internal_set_from(value);
  // @@protoc_insertion_point(field_set:ssp.RegReq.from)
}

// optional int32 t1 = 31;
inline bool RegReq::_internal_has_t1() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RegReq::has_t1() const {
  return _internal_has_t1();
}
inline void RegReq::clear_t1() {
  t1_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline int32_t RegReq::_internal_t1() const {
  return t1_;
}
inline int32_t RegReq::t1() const {
  // @@protoc_insertion_point(field_get:ssp.RegReq.t1)
  return _internal_t1();
}
inline void RegReq::_internal_set_t1(int32_t value) {
  _has_bits_[0] |= 0x00000020u;
  t1_ = value;
}
inline void RegReq::set_t1(int32_t value) {
  _internal_set_t1(value);
  // @@protoc_insertion_point(field_set:ssp.RegReq.t1)
}

// optional int32 t2 = 32;
inline bool RegReq::_internal_has_t2() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RegReq::has_t2() const {
  return _internal_has_t2();
}
inline void RegReq::clear_t2() {
  t2_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline int32_t RegReq::_internal_t2() const {
  return t2_;
}
inline int32_t RegReq::t2() const {
  // @@protoc_insertion_point(field_get:ssp.RegReq.t2)
  return _internal_t2();
}
inline void RegReq::_internal_set_t2(int32_t value) {
  _has_bits_[0] |= 0x00000040u;
  t2_ = value;
}
inline void RegReq::set_t2(int32_t value) {
  _internal_set_t2(value);
  // @@protoc_insertion_point(field_set:ssp.RegReq.t2)
}

// optional int32 t3 = 33;
inline bool RegReq::_internal_has_t3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RegReq::has_t3() const {
  return _internal_has_t3();
}
inline void RegReq::clear_t3() {
  t3_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t RegReq::_internal_t3() const {
  return t3_;
}
inline int32_t RegReq::t3() const {
  // @@protoc_insertion_point(field_get:ssp.RegReq.t3)
  return _internal_t3();
}
inline void RegReq::_internal_set_t3(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  t3_ = value;
}
inline void RegReq::set_t3(int32_t value) {
  _internal_set_t3(value);
  // @@protoc_insertion_point(field_set:ssp.RegReq.t3)
}

// -------------------------------------------------------------------

// RegRsp

// optional int32 ver = 1;
inline bool RegRsp::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RegRsp::has_ver() const {
  return _internal_has_ver();
}
inline void RegRsp::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t RegRsp::_internal_ver() const {
  return ver_;
}
inline int32_t RegRsp::ver() const {
  // @@protoc_insertion_point(field_get:ssp.RegRsp.ver)
  return _internal_ver();
}
inline void RegRsp::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void RegRsp::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.RegRsp.ver)
}

// optional int32 ret = 3;
inline bool RegRsp::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RegRsp::has_ret() const {
  return _internal_has_ret();
}
inline void RegRsp::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t RegRsp::_internal_ret() const {
  return ret_;
}
inline int32_t RegRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.RegRsp.ret)
  return _internal_ret();
}
inline void RegRsp::_internal_set_ret(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ret_ = value;
}
inline void RegRsp::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:ssp.RegRsp.ret)
}

// optional int32 user_id = 4;
inline bool RegRsp::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RegRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void RegRsp::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t RegRsp::_internal_user_id() const {
  return user_id_;
}
inline int32_t RegRsp::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.RegRsp.user_id)
  return _internal_user_id();
}
inline void RegRsp::_internal_set_user_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  user_id_ = value;
}
inline void RegRsp::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ssp.RegRsp.user_id)
}

// -------------------------------------------------------------------

// LoginReq

// optional int32 ver = 1;
inline bool LoginReq::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoginReq::has_ver() const {
  return _internal_has_ver();
}
inline void LoginReq::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t LoginReq::_internal_ver() const {
  return ver_;
}
inline int32_t LoginReq::ver() const {
  // @@protoc_insertion_point(field_get:ssp.LoginReq.ver)
  return _internal_ver();
}
inline void LoginReq::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  ver_ = value;
}
inline void LoginReq::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.LoginReq.ver)
}

// optional int32 user_id = 3;
inline bool LoginReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool LoginReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void LoginReq::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t LoginReq::_internal_user_id() const {
  return user_id_;
}
inline int32_t LoginReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.LoginReq.user_id)
  return _internal_user_id();
}
inline void LoginReq::_internal_set_user_id(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  user_id_ = value;
}
inline void LoginReq::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ssp.LoginReq.user_id)
}

// optional string user_name = 4;
inline bool LoginReq::_internal_has_user_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginReq::has_user_name() const {
  return _internal_has_user_name();
}
inline void LoginReq::clear_user_name() {
  user_name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginReq::user_name() const {
  // @@protoc_insertion_point(field_get:ssp.LoginReq.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReq::set_user_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ssp.LoginReq.user_name)
}
inline std::string* LoginReq::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:ssp.LoginReq.user_name)
  return _s;
}
inline const std::string& LoginReq::_internal_user_name() const {
  return user_name_.Get();
}
inline void LoginReq::_internal_set_user_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginReq::_internal_mutable_user_name() {
  _has_bits_[0] |= 0x00000001u;
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginReq::release_user_name() {
  // @@protoc_insertion_point(field_release:ssp.LoginReq.user_name)
  if (!_internal_has_user_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = user_name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginReq::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (user_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    user_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ssp.LoginReq.user_name)
}

// optional string password = 5;
inline bool LoginReq::_internal_has_password() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginReq::has_password() const {
  return _internal_has_password();
}
inline void LoginReq::clear_password() {
  password_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LoginReq::password() const {
  // @@protoc_insertion_point(field_get:ssp.LoginReq.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LoginReq::set_password(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ssp.LoginReq.password)
}
inline std::string* LoginReq::mutable_password() {
  std::string* _s = _internal_mutable_password();
  // @@protoc_insertion_point(field_mutable:ssp.LoginReq.password)
  return _s;
}
inline const std::string& LoginReq::_internal_password() const {
  return password_.Get();
}
inline void LoginReq::_internal_set_password(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* LoginReq::_internal_mutable_password() {
  _has_bits_[0] |= 0x00000002u;
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* LoginReq::release_password() {
  // @@protoc_insertion_point(field_release:ssp.LoginReq.password)
  if (!_internal_has_password()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  auto* p = password_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void LoginReq::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (password_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    password_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ssp.LoginReq.password)
}

// -------------------------------------------------------------------

// LoginRsp

// optional int32 ver = 1;
inline bool LoginRsp::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LoginRsp::has_ver() const {
  return _internal_has_ver();
}
inline void LoginRsp::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t LoginRsp::_internal_ver() const {
  return ver_;
}
inline int32_t LoginRsp::ver() const {
  // @@protoc_insertion_point(field_get:ssp.LoginRsp.ver)
  return _internal_ver();
}
inline void LoginRsp::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void LoginRsp::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.LoginRsp.ver)
}

// optional int32 ret = 3;
inline bool LoginRsp::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LoginRsp::has_ret() const {
  return _internal_has_ret();
}
inline void LoginRsp::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t LoginRsp::_internal_ret() const {
  return ret_;
}
inline int32_t LoginRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.LoginRsp.ret)
  return _internal_ret();
}
inline void LoginRsp::_internal_set_ret(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ret_ = value;
}
inline void LoginRsp::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:ssp.LoginRsp.ret)
}

// optional int32 user_id = 4;
inline bool LoginRsp::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool LoginRsp::has_user_id() const {
  return _internal_has_user_id();
}
inline void LoginRsp::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t LoginRsp::_internal_user_id() const {
  return user_id_;
}
inline int32_t LoginRsp::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.LoginRsp.user_id)
  return _internal_user_id();
}
inline void LoginRsp::_internal_set_user_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  user_id_ = value;
}
inline void LoginRsp::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ssp.LoginRsp.user_id)
}

// -------------------------------------------------------------------

// LogoutReq

// optional int32 ver = 1;
inline bool LogoutReq::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogoutReq::has_ver() const {
  return _internal_has_ver();
}
inline void LogoutReq::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t LogoutReq::_internal_ver() const {
  return ver_;
}
inline int32_t LogoutReq::ver() const {
  // @@protoc_insertion_point(field_get:ssp.LogoutReq.ver)
  return _internal_ver();
}
inline void LogoutReq::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void LogoutReq::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.LogoutReq.ver)
}

// optional int32 user_id = 3;
inline bool LogoutReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogoutReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void LogoutReq::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t LogoutReq::_internal_user_id() const {
  return user_id_;
}
inline int32_t LogoutReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.LogoutReq.user_id)
  return _internal_user_id();
}
inline void LogoutReq::_internal_set_user_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_ = value;
}
inline void LogoutReq::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ssp.LogoutReq.user_id)
}

// -------------------------------------------------------------------

// LogoutRsp

// optional int32 ver = 1;
inline bool LogoutRsp::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool LogoutRsp::has_ver() const {
  return _internal_has_ver();
}
inline void LogoutRsp::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t LogoutRsp::_internal_ver() const {
  return ver_;
}
inline int32_t LogoutRsp::ver() const {
  // @@protoc_insertion_point(field_get:ssp.LogoutRsp.ver)
  return _internal_ver();
}
inline void LogoutRsp::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void LogoutRsp::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.LogoutRsp.ver)
}

// optional int32 ret = 3;
inline bool LogoutRsp::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool LogoutRsp::has_ret() const {
  return _internal_has_ret();
}
inline void LogoutRsp::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t LogoutRsp::_internal_ret() const {
  return ret_;
}
inline int32_t LogoutRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.LogoutRsp.ret)
  return _internal_ret();
}
inline void LogoutRsp::_internal_set_ret(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ret_ = value;
}
inline void LogoutRsp::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:ssp.LogoutRsp.ret)
}

// -------------------------------------------------------------------

// DeleteUserReq

// optional int32 ver = 1;
inline bool DeleteUserReq::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeleteUserReq::has_ver() const {
  return _internal_has_ver();
}
inline void DeleteUserReq::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t DeleteUserReq::_internal_ver() const {
  return ver_;
}
inline int32_t DeleteUserReq::ver() const {
  // @@protoc_insertion_point(field_get:ssp.DeleteUserReq.ver)
  return _internal_ver();
}
inline void DeleteUserReq::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void DeleteUserReq::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.DeleteUserReq.ver)
}

// optional int32 user_id = 3;
inline bool DeleteUserReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeleteUserReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void DeleteUserReq::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t DeleteUserReq::_internal_user_id() const {
  return user_id_;
}
inline int32_t DeleteUserReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.DeleteUserReq.user_id)
  return _internal_user_id();
}
inline void DeleteUserReq::_internal_set_user_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_ = value;
}
inline void DeleteUserReq::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ssp.DeleteUserReq.user_id)
}

// -------------------------------------------------------------------

// DeleteUserRsp

// optional int32 ver = 1;
inline bool DeleteUserRsp::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeleteUserRsp::has_ver() const {
  return _internal_has_ver();
}
inline void DeleteUserRsp::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t DeleteUserRsp::_internal_ver() const {
  return ver_;
}
inline int32_t DeleteUserRsp::ver() const {
  // @@protoc_insertion_point(field_get:ssp.DeleteUserRsp.ver)
  return _internal_ver();
}
inline void DeleteUserRsp::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void DeleteUserRsp::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.DeleteUserRsp.ver)
}

// optional int32 ret = 3;
inline bool DeleteUserRsp::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeleteUserRsp::has_ret() const {
  return _internal_has_ret();
}
inline void DeleteUserRsp::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t DeleteUserRsp::_internal_ret() const {
  return ret_;
}
inline int32_t DeleteUserRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.DeleteUserRsp.ret)
  return _internal_ret();
}
inline void DeleteUserRsp::_internal_set_ret(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ret_ = value;
}
inline void DeleteUserRsp::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:ssp.DeleteUserRsp.ret)
}

// -------------------------------------------------------------------

// MessageBase

// optional int32 ver = 1;
inline bool MessageBase::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MessageBase::has_ver() const {
  return _internal_has_ver();
}
inline void MessageBase::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t MessageBase::_internal_ver() const {
  return ver_;
}
inline int32_t MessageBase::ver() const {
  // @@protoc_insertion_point(field_get:ssp.MessageBase.ver)
  return _internal_ver();
}
inline void MessageBase::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ver_ = value;
}
inline void MessageBase::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.MessageBase.ver)
}

// optional int32 message_id = 2;
inline bool MessageBase::_internal_has_message_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MessageBase::has_message_id() const {
  return _internal_has_message_id();
}
inline void MessageBase::clear_message_id() {
  message_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t MessageBase::_internal_message_id() const {
  return message_id_;
}
inline int32_t MessageBase::message_id() const {
  // @@protoc_insertion_point(field_get:ssp.MessageBase.message_id)
  return _internal_message_id();
}
inline void MessageBase::_internal_set_message_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  message_id_ = value;
}
inline void MessageBase::set_message_id(int32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:ssp.MessageBase.message_id)
}

// optional int32 publisher = 3;
inline bool MessageBase::_internal_has_publisher() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MessageBase::has_publisher() const {
  return _internal_has_publisher();
}
inline void MessageBase::clear_publisher() {
  publisher_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t MessageBase::_internal_publisher() const {
  return publisher_;
}
inline int32_t MessageBase::publisher() const {
  // @@protoc_insertion_point(field_get:ssp.MessageBase.publisher)
  return _internal_publisher();
}
inline void MessageBase::_internal_set_publisher(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  publisher_ = value;
}
inline void MessageBase::set_publisher(int32_t value) {
  _internal_set_publisher(value);
  // @@protoc_insertion_point(field_set:ssp.MessageBase.publisher)
}

// optional string content = 4;
inline bool MessageBase::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MessageBase::has_content() const {
  return _internal_has_content();
}
inline void MessageBase::clear_content() {
  content_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MessageBase::content() const {
  // @@protoc_insertion_point(field_get:ssp.MessageBase.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageBase::set_content(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ssp.MessageBase.content)
}
inline std::string* MessageBase::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:ssp.MessageBase.content)
  return _s;
}
inline const std::string& MessageBase::_internal_content() const {
  return content_.Get();
}
inline void MessageBase::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MessageBase::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MessageBase::release_content() {
  // @@protoc_insertion_point(field_release:ssp.MessageBase.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = content_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MessageBase::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ssp.MessageBase.content)
}

// optional int32 publish_time = 5;
inline bool MessageBase::_internal_has_publish_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MessageBase::has_publish_time() const {
  return _internal_has_publish_time();
}
inline void MessageBase::clear_publish_time() {
  publish_time_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t MessageBase::_internal_publish_time() const {
  return publish_time_;
}
inline int32_t MessageBase::publish_time() const {
  // @@protoc_insertion_point(field_get:ssp.MessageBase.publish_time)
  return _internal_publish_time();
}
inline void MessageBase::_internal_set_publish_time(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  publish_time_ = value;
}
inline void MessageBase::set_publish_time(int32_t value) {
  _internal_set_publish_time(value);
  // @@protoc_insertion_point(field_set:ssp.MessageBase.publish_time)
}

// -------------------------------------------------------------------

// PublishMessageReq

// optional int32 ver = 1;
inline bool PublishMessageReq::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishMessageReq::has_ver() const {
  return _internal_has_ver();
}
inline void PublishMessageReq::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t PublishMessageReq::_internal_ver() const {
  return ver_;
}
inline int32_t PublishMessageReq::ver() const {
  // @@protoc_insertion_point(field_get:ssp.PublishMessageReq.ver)
  return _internal_ver();
}
inline void PublishMessageReq::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ver_ = value;
}
inline void PublishMessageReq::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.PublishMessageReq.ver)
}

// optional int32 user_id = 3;
inline bool PublishMessageReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PublishMessageReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void PublishMessageReq::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t PublishMessageReq::_internal_user_id() const {
  return user_id_;
}
inline int32_t PublishMessageReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.PublishMessageReq.user_id)
  return _internal_user_id();
}
inline void PublishMessageReq::_internal_set_user_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  user_id_ = value;
}
inline void PublishMessageReq::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ssp.PublishMessageReq.user_id)
}

// optional string content = 4;
inline bool PublishMessageReq::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishMessageReq::has_content() const {
  return _internal_has_content();
}
inline void PublishMessageReq::clear_content() {
  content_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PublishMessageReq::content() const {
  // @@protoc_insertion_point(field_get:ssp.PublishMessageReq.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PublishMessageReq::set_content(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ssp.PublishMessageReq.content)
}
inline std::string* PublishMessageReq::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:ssp.PublishMessageReq.content)
  return _s;
}
inline const std::string& PublishMessageReq::_internal_content() const {
  return content_.Get();
}
inline void PublishMessageReq::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PublishMessageReq::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PublishMessageReq::release_content() {
  // @@protoc_insertion_point(field_release:ssp.PublishMessageReq.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = content_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void PublishMessageReq::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ssp.PublishMessageReq.content)
}

// -------------------------------------------------------------------

// PublishMessageRsp

// optional int32 ver = 1;
inline bool PublishMessageRsp::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PublishMessageRsp::has_ver() const {
  return _internal_has_ver();
}
inline void PublishMessageRsp::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t PublishMessageRsp::_internal_ver() const {
  return ver_;
}
inline int32_t PublishMessageRsp::ver() const {
  // @@protoc_insertion_point(field_get:ssp.PublishMessageRsp.ver)
  return _internal_ver();
}
inline void PublishMessageRsp::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void PublishMessageRsp::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.PublishMessageRsp.ver)
}

// optional int32 ret = 3;
inline bool PublishMessageRsp::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PublishMessageRsp::has_ret() const {
  return _internal_has_ret();
}
inline void PublishMessageRsp::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t PublishMessageRsp::_internal_ret() const {
  return ret_;
}
inline int32_t PublishMessageRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.PublishMessageRsp.ret)
  return _internal_ret();
}
inline void PublishMessageRsp::_internal_set_ret(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ret_ = value;
}
inline void PublishMessageRsp::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:ssp.PublishMessageRsp.ret)
}

// -------------------------------------------------------------------

// GetMessageReq

// optional int32 ver = 1;
inline bool GetMessageReq::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetMessageReq::has_ver() const {
  return _internal_has_ver();
}
inline void GetMessageReq::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t GetMessageReq::_internal_ver() const {
  return ver_;
}
inline int32_t GetMessageReq::ver() const {
  // @@protoc_insertion_point(field_get:ssp.GetMessageReq.ver)
  return _internal_ver();
}
inline void GetMessageReq::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void GetMessageReq::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.GetMessageReq.ver)
}

// optional int32 user_id = 3;
inline bool GetMessageReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetMessageReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetMessageReq::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t GetMessageReq::_internal_user_id() const {
  return user_id_;
}
inline int32_t GetMessageReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.GetMessageReq.user_id)
  return _internal_user_id();
}
inline void GetMessageReq::_internal_set_user_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_ = value;
}
inline void GetMessageReq::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ssp.GetMessageReq.user_id)
}

// int32 message_id = 4;
inline void GetMessageReq::clear_message_id() {
  message_id_ = 0;
}
inline int32_t GetMessageReq::_internal_message_id() const {
  return message_id_;
}
inline int32_t GetMessageReq::message_id() const {
  // @@protoc_insertion_point(field_get:ssp.GetMessageReq.message_id)
  return _internal_message_id();
}
inline void GetMessageReq::_internal_set_message_id(int32_t value) {
  
  message_id_ = value;
}
inline void GetMessageReq::set_message_id(int32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:ssp.GetMessageReq.message_id)
}

// -------------------------------------------------------------------

// GetMessageRsp

// optional int32 ver = 1;
inline bool GetMessageRsp::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetMessageRsp::has_ver() const {
  return _internal_has_ver();
}
inline void GetMessageRsp::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t GetMessageRsp::_internal_ver() const {
  return ver_;
}
inline int32_t GetMessageRsp::ver() const {
  // @@protoc_insertion_point(field_get:ssp.GetMessageRsp.ver)
  return _internal_ver();
}
inline void GetMessageRsp::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ver_ = value;
}
inline void GetMessageRsp::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.GetMessageRsp.ver)
}

// optional int32 ret = 3;
inline bool GetMessageRsp::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GetMessageRsp::has_ret() const {
  return _internal_has_ret();
}
inline void GetMessageRsp::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t GetMessageRsp::_internal_ret() const {
  return ret_;
}
inline int32_t GetMessageRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.GetMessageRsp.ret)
  return _internal_ret();
}
inline void GetMessageRsp::_internal_set_ret(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  ret_ = value;
}
inline void GetMessageRsp::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:ssp.GetMessageRsp.ret)
}

// optional .ssp.MessageBase message_info = 4;
inline bool GetMessageRsp::_internal_has_message_info() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || message_info_ != nullptr);
  return value;
}
inline bool GetMessageRsp::has_message_info() const {
  return _internal_has_message_info();
}
inline void GetMessageRsp::clear_message_info() {
  if (message_info_ != nullptr) message_info_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::ssp::MessageBase& GetMessageRsp::_internal_message_info() const {
  const ::ssp::MessageBase* p = message_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::ssp::MessageBase&>(
      ::ssp::_MessageBase_default_instance_);
}
inline const ::ssp::MessageBase& GetMessageRsp::message_info() const {
  // @@protoc_insertion_point(field_get:ssp.GetMessageRsp.message_info)
  return _internal_message_info();
}
inline void GetMessageRsp::unsafe_arena_set_allocated_message_info(
    ::ssp::MessageBase* message_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_info_);
  }
  message_info_ = message_info;
  if (message_info) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ssp.GetMessageRsp.message_info)
}
inline ::ssp::MessageBase* GetMessageRsp::release_message_info() {
  _has_bits_[0] &= ~0x00000001u;
  ::ssp::MessageBase* temp = message_info_;
  message_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::ssp::MessageBase* GetMessageRsp::unsafe_arena_release_message_info() {
  // @@protoc_insertion_point(field_release:ssp.GetMessageRsp.message_info)
  _has_bits_[0] &= ~0x00000001u;
  ::ssp::MessageBase* temp = message_info_;
  message_info_ = nullptr;
  return temp;
}
inline ::ssp::MessageBase* GetMessageRsp::_internal_mutable_message_info() {
  _has_bits_[0] |= 0x00000001u;
  if (message_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::ssp::MessageBase>(GetArenaForAllocation());
    message_info_ = p;
  }
  return message_info_;
}
inline ::ssp::MessageBase* GetMessageRsp::mutable_message_info() {
  ::ssp::MessageBase* _msg = _internal_mutable_message_info();
  // @@protoc_insertion_point(field_mutable:ssp.GetMessageRsp.message_info)
  return _msg;
}
inline void GetMessageRsp::set_allocated_message_info(::ssp::MessageBase* message_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_info_;
  }
  if (message_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ssp::MessageBase>::GetOwningArena(message_info);
    if (message_arena != submessage_arena) {
      message_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_info_ = message_info;
  // @@protoc_insertion_point(field_set_allocated:ssp.GetMessageRsp.message_info)
}

// -------------------------------------------------------------------

// GetPhotoReq

// optional int32 ver = 1;
inline bool GetPhotoReq::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetPhotoReq::has_ver() const {
  return _internal_has_ver();
}
inline void GetPhotoReq::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t GetPhotoReq::_internal_ver() const {
  return ver_;
}
inline int32_t GetPhotoReq::ver() const {
  // @@protoc_insertion_point(field_get:ssp.GetPhotoReq.ver)
  return _internal_ver();
}
inline void GetPhotoReq::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void GetPhotoReq::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.GetPhotoReq.ver)
}

// optional int32 user_id = 3;
inline bool GetPhotoReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetPhotoReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void GetPhotoReq::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t GetPhotoReq::_internal_user_id() const {
  return user_id_;
}
inline int32_t GetPhotoReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.GetPhotoReq.user_id)
  return _internal_user_id();
}
inline void GetPhotoReq::_internal_set_user_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_ = value;
}
inline void GetPhotoReq::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ssp.GetPhotoReq.user_id)
}

// -------------------------------------------------------------------

// GetPhotoRsp

// optional int32 ver = 1;
inline bool GetPhotoRsp::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GetPhotoRsp::has_ver() const {
  return _internal_has_ver();
}
inline void GetPhotoRsp::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t GetPhotoRsp::_internal_ver() const {
  return ver_;
}
inline int32_t GetPhotoRsp::ver() const {
  // @@protoc_insertion_point(field_get:ssp.GetPhotoRsp.ver)
  return _internal_ver();
}
inline void GetPhotoRsp::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void GetPhotoRsp::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.GetPhotoRsp.ver)
}

// optional int32 ret = 3;
inline bool GetPhotoRsp::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GetPhotoRsp::has_ret() const {
  return _internal_has_ret();
}
inline void GetPhotoRsp::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t GetPhotoRsp::_internal_ret() const {
  return ret_;
}
inline int32_t GetPhotoRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.GetPhotoRsp.ret)
  return _internal_ret();
}
inline void GetPhotoRsp::_internal_set_ret(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ret_ = value;
}
inline void GetPhotoRsp::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:ssp.GetPhotoRsp.ret)
}

// repeated .ssp.MessageBase message_info = 4;
inline int GetPhotoRsp::_internal_message_info_size() const {
  return message_info_.size();
}
inline int GetPhotoRsp::message_info_size() const {
  return _internal_message_info_size();
}
inline void GetPhotoRsp::clear_message_info() {
  message_info_.Clear();
}
inline ::ssp::MessageBase* GetPhotoRsp::mutable_message_info(int index) {
  // @@protoc_insertion_point(field_mutable:ssp.GetPhotoRsp.message_info)
  return message_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ssp::MessageBase >*
GetPhotoRsp::mutable_message_info() {
  // @@protoc_insertion_point(field_mutable_list:ssp.GetPhotoRsp.message_info)
  return &message_info_;
}
inline const ::ssp::MessageBase& GetPhotoRsp::_internal_message_info(int index) const {
  return message_info_.Get(index);
}
inline const ::ssp::MessageBase& GetPhotoRsp::message_info(int index) const {
  // @@protoc_insertion_point(field_get:ssp.GetPhotoRsp.message_info)
  return _internal_message_info(index);
}
inline ::ssp::MessageBase* GetPhotoRsp::_internal_add_message_info() {
  return message_info_.Add();
}
inline ::ssp::MessageBase* GetPhotoRsp::add_message_info() {
  ::ssp::MessageBase* _add = _internal_add_message_info();
  // @@protoc_insertion_point(field_add:ssp.GetPhotoRsp.message_info)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ssp::MessageBase >&
GetPhotoRsp::message_info() const {
  // @@protoc_insertion_point(field_list:ssp.GetPhotoRsp.message_info)
  return message_info_;
}

// -------------------------------------------------------------------

// DeleteMessageReq

// optional int32 ver = 1;
inline bool DeleteMessageReq::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeleteMessageReq::has_ver() const {
  return _internal_has_ver();
}
inline void DeleteMessageReq::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t DeleteMessageReq::_internal_ver() const {
  return ver_;
}
inline int32_t DeleteMessageReq::ver() const {
  // @@protoc_insertion_point(field_get:ssp.DeleteMessageReq.ver)
  return _internal_ver();
}
inline void DeleteMessageReq::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void DeleteMessageReq::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.DeleteMessageReq.ver)
}

// optional int32 user_id = 3;
inline bool DeleteMessageReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeleteMessageReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void DeleteMessageReq::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t DeleteMessageReq::_internal_user_id() const {
  return user_id_;
}
inline int32_t DeleteMessageReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.DeleteMessageReq.user_id)
  return _internal_user_id();
}
inline void DeleteMessageReq::_internal_set_user_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_ = value;
}
inline void DeleteMessageReq::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ssp.DeleteMessageReq.user_id)
}

// optional int32 message_id = 4;
inline bool DeleteMessageReq::_internal_has_message_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeleteMessageReq::has_message_id() const {
  return _internal_has_message_id();
}
inline void DeleteMessageReq::clear_message_id() {
  message_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t DeleteMessageReq::_internal_message_id() const {
  return message_id_;
}
inline int32_t DeleteMessageReq::message_id() const {
  // @@protoc_insertion_point(field_get:ssp.DeleteMessageReq.message_id)
  return _internal_message_id();
}
inline void DeleteMessageReq::_internal_set_message_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  message_id_ = value;
}
inline void DeleteMessageReq::set_message_id(int32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:ssp.DeleteMessageReq.message_id)
}

// -------------------------------------------------------------------

// DeleteMessageRsp

// optional int32 ver = 1;
inline bool DeleteMessageRsp::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeleteMessageRsp::has_ver() const {
  return _internal_has_ver();
}
inline void DeleteMessageRsp::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t DeleteMessageRsp::_internal_ver() const {
  return ver_;
}
inline int32_t DeleteMessageRsp::ver() const {
  // @@protoc_insertion_point(field_get:ssp.DeleteMessageRsp.ver)
  return _internal_ver();
}
inline void DeleteMessageRsp::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void DeleteMessageRsp::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.DeleteMessageRsp.ver)
}

// optional int32 ret = 3;
inline bool DeleteMessageRsp::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeleteMessageRsp::has_ret() const {
  return _internal_has_ret();
}
inline void DeleteMessageRsp::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t DeleteMessageRsp::_internal_ret() const {
  return ret_;
}
inline int32_t DeleteMessageRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.DeleteMessageRsp.ret)
  return _internal_ret();
}
inline void DeleteMessageRsp::_internal_set_ret(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ret_ = value;
}
inline void DeleteMessageRsp::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:ssp.DeleteMessageRsp.ret)
}

// -------------------------------------------------------------------

// AddFriendReq

// optional int32 ver = 1;
inline bool AddFriendReq::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AddFriendReq::has_ver() const {
  return _internal_has_ver();
}
inline void AddFriendReq::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t AddFriendReq::_internal_ver() const {
  return ver_;
}
inline int32_t AddFriendReq::ver() const {
  // @@protoc_insertion_point(field_get:ssp.AddFriendReq.ver)
  return _internal_ver();
}
inline void AddFriendReq::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void AddFriendReq::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.AddFriendReq.ver)
}

// optional int32 user_id = 3;
inline bool AddFriendReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AddFriendReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void AddFriendReq::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t AddFriendReq::_internal_user_id() const {
  return user_id_;
}
inline int32_t AddFriendReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.AddFriendReq.user_id)
  return _internal_user_id();
}
inline void AddFriendReq::_internal_set_user_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_ = value;
}
inline void AddFriendReq::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ssp.AddFriendReq.user_id)
}

// optional int32 other_id = 4;
inline bool AddFriendReq::_internal_has_other_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AddFriendReq::has_other_id() const {
  return _internal_has_other_id();
}
inline void AddFriendReq::clear_other_id() {
  other_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t AddFriendReq::_internal_other_id() const {
  return other_id_;
}
inline int32_t AddFriendReq::other_id() const {
  // @@protoc_insertion_point(field_get:ssp.AddFriendReq.other_id)
  return _internal_other_id();
}
inline void AddFriendReq::_internal_set_other_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  other_id_ = value;
}
inline void AddFriendReq::set_other_id(int32_t value) {
  _internal_set_other_id(value);
  // @@protoc_insertion_point(field_set:ssp.AddFriendReq.other_id)
}

// -------------------------------------------------------------------

// AddFriendRsp

// optional int32 ver = 1;
inline bool AddFriendRsp::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AddFriendRsp::has_ver() const {
  return _internal_has_ver();
}
inline void AddFriendRsp::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t AddFriendRsp::_internal_ver() const {
  return ver_;
}
inline int32_t AddFriendRsp::ver() const {
  // @@protoc_insertion_point(field_get:ssp.AddFriendRsp.ver)
  return _internal_ver();
}
inline void AddFriendRsp::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void AddFriendRsp::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.AddFriendRsp.ver)
}

// optional int32 ret = 3;
inline bool AddFriendRsp::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AddFriendRsp::has_ret() const {
  return _internal_has_ret();
}
inline void AddFriendRsp::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t AddFriendRsp::_internal_ret() const {
  return ret_;
}
inline int32_t AddFriendRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.AddFriendRsp.ret)
  return _internal_ret();
}
inline void AddFriendRsp::_internal_set_ret(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ret_ = value;
}
inline void AddFriendRsp::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:ssp.AddFriendRsp.ret)
}

// -------------------------------------------------------------------

// DelFriendReq

// optional int32 ver = 1;
inline bool DelFriendReq::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DelFriendReq::has_ver() const {
  return _internal_has_ver();
}
inline void DelFriendReq::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t DelFriendReq::_internal_ver() const {
  return ver_;
}
inline int32_t DelFriendReq::ver() const {
  // @@protoc_insertion_point(field_get:ssp.DelFriendReq.ver)
  return _internal_ver();
}
inline void DelFriendReq::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void DelFriendReq::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.DelFriendReq.ver)
}

// optional int32 user_id = 3;
inline bool DelFriendReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DelFriendReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void DelFriendReq::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t DelFriendReq::_internal_user_id() const {
  return user_id_;
}
inline int32_t DelFriendReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.DelFriendReq.user_id)
  return _internal_user_id();
}
inline void DelFriendReq::_internal_set_user_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_ = value;
}
inline void DelFriendReq::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ssp.DelFriendReq.user_id)
}

// optional int32 other_id = 4;
inline bool DelFriendReq::_internal_has_other_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DelFriendReq::has_other_id() const {
  return _internal_has_other_id();
}
inline void DelFriendReq::clear_other_id() {
  other_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t DelFriendReq::_internal_other_id() const {
  return other_id_;
}
inline int32_t DelFriendReq::other_id() const {
  // @@protoc_insertion_point(field_get:ssp.DelFriendReq.other_id)
  return _internal_other_id();
}
inline void DelFriendReq::_internal_set_other_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  other_id_ = value;
}
inline void DelFriendReq::set_other_id(int32_t value) {
  _internal_set_other_id(value);
  // @@protoc_insertion_point(field_set:ssp.DelFriendReq.other_id)
}

// -------------------------------------------------------------------

// DelFriendRsp

// optional int32 ver = 1;
inline bool DelFriendRsp::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DelFriendRsp::has_ver() const {
  return _internal_has_ver();
}
inline void DelFriendRsp::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t DelFriendRsp::_internal_ver() const {
  return ver_;
}
inline int32_t DelFriendRsp::ver() const {
  // @@protoc_insertion_point(field_get:ssp.DelFriendRsp.ver)
  return _internal_ver();
}
inline void DelFriendRsp::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void DelFriendRsp::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.DelFriendRsp.ver)
}

// optional int32 ret = 3;
inline bool DelFriendRsp::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DelFriendRsp::has_ret() const {
  return _internal_has_ret();
}
inline void DelFriendRsp::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t DelFriendRsp::_internal_ret() const {
  return ret_;
}
inline int32_t DelFriendRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.DelFriendRsp.ret)
  return _internal_ret();
}
inline void DelFriendRsp::_internal_set_ret(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ret_ = value;
}
inline void DelFriendRsp::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:ssp.DelFriendRsp.ret)
}

// -------------------------------------------------------------------

// AddBlackReq

// optional int32 ver = 1;
inline bool AddBlackReq::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AddBlackReq::has_ver() const {
  return _internal_has_ver();
}
inline void AddBlackReq::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t AddBlackReq::_internal_ver() const {
  return ver_;
}
inline int32_t AddBlackReq::ver() const {
  // @@protoc_insertion_point(field_get:ssp.AddBlackReq.ver)
  return _internal_ver();
}
inline void AddBlackReq::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void AddBlackReq::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.AddBlackReq.ver)
}

// optional int32 user_id = 3;
inline bool AddBlackReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AddBlackReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void AddBlackReq::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t AddBlackReq::_internal_user_id() const {
  return user_id_;
}
inline int32_t AddBlackReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.AddBlackReq.user_id)
  return _internal_user_id();
}
inline void AddBlackReq::_internal_set_user_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_ = value;
}
inline void AddBlackReq::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ssp.AddBlackReq.user_id)
}

// optional int32 other_id = 4;
inline bool AddBlackReq::_internal_has_other_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AddBlackReq::has_other_id() const {
  return _internal_has_other_id();
}
inline void AddBlackReq::clear_other_id() {
  other_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t AddBlackReq::_internal_other_id() const {
  return other_id_;
}
inline int32_t AddBlackReq::other_id() const {
  // @@protoc_insertion_point(field_get:ssp.AddBlackReq.other_id)
  return _internal_other_id();
}
inline void AddBlackReq::_internal_set_other_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  other_id_ = value;
}
inline void AddBlackReq::set_other_id(int32_t value) {
  _internal_set_other_id(value);
  // @@protoc_insertion_point(field_set:ssp.AddBlackReq.other_id)
}

// -------------------------------------------------------------------

// AddBlackRsp

// optional int32 ver = 1;
inline bool AddBlackRsp::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AddBlackRsp::has_ver() const {
  return _internal_has_ver();
}
inline void AddBlackRsp::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t AddBlackRsp::_internal_ver() const {
  return ver_;
}
inline int32_t AddBlackRsp::ver() const {
  // @@protoc_insertion_point(field_get:ssp.AddBlackRsp.ver)
  return _internal_ver();
}
inline void AddBlackRsp::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void AddBlackRsp::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.AddBlackRsp.ver)
}

// optional int32 ret = 3;
inline bool AddBlackRsp::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AddBlackRsp::has_ret() const {
  return _internal_has_ret();
}
inline void AddBlackRsp::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t AddBlackRsp::_internal_ret() const {
  return ret_;
}
inline int32_t AddBlackRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.AddBlackRsp.ret)
  return _internal_ret();
}
inline void AddBlackRsp::_internal_set_ret(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ret_ = value;
}
inline void AddBlackRsp::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:ssp.AddBlackRsp.ret)
}

// -------------------------------------------------------------------

// DelBlackReq

// optional int32 ver = 1;
inline bool DelBlackReq::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DelBlackReq::has_ver() const {
  return _internal_has_ver();
}
inline void DelBlackReq::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t DelBlackReq::_internal_ver() const {
  return ver_;
}
inline int32_t DelBlackReq::ver() const {
  // @@protoc_insertion_point(field_get:ssp.DelBlackReq.ver)
  return _internal_ver();
}
inline void DelBlackReq::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void DelBlackReq::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.DelBlackReq.ver)
}

// optional int32 user_id = 3;
inline bool DelBlackReq::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DelBlackReq::has_user_id() const {
  return _internal_has_user_id();
}
inline void DelBlackReq::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t DelBlackReq::_internal_user_id() const {
  return user_id_;
}
inline int32_t DelBlackReq::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.DelBlackReq.user_id)
  return _internal_user_id();
}
inline void DelBlackReq::_internal_set_user_id(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  user_id_ = value;
}
inline void DelBlackReq::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ssp.DelBlackReq.user_id)
}

// optional int32 other_id = 4;
inline bool DelBlackReq::_internal_has_other_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DelBlackReq::has_other_id() const {
  return _internal_has_other_id();
}
inline void DelBlackReq::clear_other_id() {
  other_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t DelBlackReq::_internal_other_id() const {
  return other_id_;
}
inline int32_t DelBlackReq::other_id() const {
  // @@protoc_insertion_point(field_get:ssp.DelBlackReq.other_id)
  return _internal_other_id();
}
inline void DelBlackReq::_internal_set_other_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  other_id_ = value;
}
inline void DelBlackReq::set_other_id(int32_t value) {
  _internal_set_other_id(value);
  // @@protoc_insertion_point(field_set:ssp.DelBlackReq.other_id)
}

// -------------------------------------------------------------------

// DelBlackRsp

// optional int32 ver = 1;
inline bool DelBlackRsp::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DelBlackRsp::has_ver() const {
  return _internal_has_ver();
}
inline void DelBlackRsp::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline int32_t DelBlackRsp::_internal_ver() const {
  return ver_;
}
inline int32_t DelBlackRsp::ver() const {
  // @@protoc_insertion_point(field_get:ssp.DelBlackRsp.ver)
  return _internal_ver();
}
inline void DelBlackRsp::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000001u;
  ver_ = value;
}
inline void DelBlackRsp::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.DelBlackRsp.ver)
}

// optional int32 ret = 3;
inline bool DelBlackRsp::_internal_has_ret() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DelBlackRsp::has_ret() const {
  return _internal_has_ret();
}
inline void DelBlackRsp::clear_ret() {
  ret_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t DelBlackRsp::_internal_ret() const {
  return ret_;
}
inline int32_t DelBlackRsp::ret() const {
  // @@protoc_insertion_point(field_get:ssp.DelBlackRsp.ret)
  return _internal_ret();
}
inline void DelBlackRsp::_internal_set_ret(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ret_ = value;
}
inline void DelBlackRsp::set_ret(int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:ssp.DelBlackRsp.ret)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace ssp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_5fdefine_2eproto
