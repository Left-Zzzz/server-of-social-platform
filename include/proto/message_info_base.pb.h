// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message_info_base.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_5finfo_5fbase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_5finfo_5fbase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_5finfo_5fbase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_5finfo_5fbase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_5finfo_5fbase_2eproto;
namespace ssp {
class MessageInfoBase;
struct MessageInfoBaseDefaultTypeInternal;
extern MessageInfoBaseDefaultTypeInternal _MessageInfoBase_default_instance_;
}  // namespace ssp
PROTOBUF_NAMESPACE_OPEN
template<> ::ssp::MessageInfoBase* Arena::CreateMaybeMessage<::ssp::MessageInfoBase>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ssp {

// ===================================================================

class MessageInfoBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ssp.MessageInfoBase) */ {
 public:
  inline MessageInfoBase() : MessageInfoBase(nullptr) {}
  ~MessageInfoBase() override;
  explicit constexpr MessageInfoBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MessageInfoBase(const MessageInfoBase& from);
  MessageInfoBase(MessageInfoBase&& from) noexcept
    : MessageInfoBase() {
    *this = ::std::move(from);
  }

  inline MessageInfoBase& operator=(const MessageInfoBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageInfoBase& operator=(MessageInfoBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageInfoBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const MessageInfoBase* internal_default_instance() {
    return reinterpret_cast<const MessageInfoBase*>(
               &_MessageInfoBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageInfoBase& a, MessageInfoBase& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageInfoBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageInfoBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageInfoBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageInfoBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MessageInfoBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MessageInfoBase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageInfoBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ssp.MessageInfoBase";
  }
  protected:
  explicit MessageInfoBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentFieldNumber = 5,
    kVerFieldNumber = 1,
    kUserIdFieldNumber = 2,
    kMessageIdFieldNumber = 3,
    kPublishTimeFieldNumber = 4,
  };
  // optional string content = 5;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // optional int32 ver = 1;
  bool has_ver() const;
  private:
  bool _internal_has_ver() const;
  public:
  void clear_ver();
  int32_t ver() const;
  void set_ver(int32_t value);
  private:
  int32_t _internal_ver() const;
  void _internal_set_ver(int32_t value);
  public:

  // optional int32 user_id = 2;
  bool has_user_id() const;
  private:
  bool _internal_has_user_id() const;
  public:
  void clear_user_id();
  int32_t user_id() const;
  void set_user_id(int32_t value);
  private:
  int32_t _internal_user_id() const;
  void _internal_set_user_id(int32_t value);
  public:

  // optional int32 message_id = 3;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  int32_t message_id() const;
  void set_message_id(int32_t value);
  private:
  int32_t _internal_message_id() const;
  void _internal_set_message_id(int32_t value);
  public:

  // optional int32 publish_time = 4;
  bool has_publish_time() const;
  private:
  bool _internal_has_publish_time() const;
  public:
  void clear_publish_time();
  int32_t publish_time() const;
  void set_publish_time(int32_t value);
  private:
  int32_t _internal_publish_time() const;
  void _internal_set_publish_time(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:ssp.MessageInfoBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  int32_t ver_;
  int32_t user_id_;
  int32_t message_id_;
  int32_t publish_time_;
  friend struct ::TableStruct_message_5finfo_5fbase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageInfoBase

// optional int32 ver = 1;
inline bool MessageInfoBase::_internal_has_ver() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool MessageInfoBase::has_ver() const {
  return _internal_has_ver();
}
inline void MessageInfoBase::clear_ver() {
  ver_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline int32_t MessageInfoBase::_internal_ver() const {
  return ver_;
}
inline int32_t MessageInfoBase::ver() const {
  // @@protoc_insertion_point(field_get:ssp.MessageInfoBase.ver)
  return _internal_ver();
}
inline void MessageInfoBase::_internal_set_ver(int32_t value) {
  _has_bits_[0] |= 0x00000002u;
  ver_ = value;
}
inline void MessageInfoBase::set_ver(int32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:ssp.MessageInfoBase.ver)
}

// optional int32 user_id = 2;
inline bool MessageInfoBase::_internal_has_user_id() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool MessageInfoBase::has_user_id() const {
  return _internal_has_user_id();
}
inline void MessageInfoBase::clear_user_id() {
  user_id_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline int32_t MessageInfoBase::_internal_user_id() const {
  return user_id_;
}
inline int32_t MessageInfoBase::user_id() const {
  // @@protoc_insertion_point(field_get:ssp.MessageInfoBase.user_id)
  return _internal_user_id();
}
inline void MessageInfoBase::_internal_set_user_id(int32_t value) {
  _has_bits_[0] |= 0x00000004u;
  user_id_ = value;
}
inline void MessageInfoBase::set_user_id(int32_t value) {
  _internal_set_user_id(value);
  // @@protoc_insertion_point(field_set:ssp.MessageInfoBase.user_id)
}

// optional int32 message_id = 3;
inline bool MessageInfoBase::_internal_has_message_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool MessageInfoBase::has_message_id() const {
  return _internal_has_message_id();
}
inline void MessageInfoBase::clear_message_id() {
  message_id_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline int32_t MessageInfoBase::_internal_message_id() const {
  return message_id_;
}
inline int32_t MessageInfoBase::message_id() const {
  // @@protoc_insertion_point(field_get:ssp.MessageInfoBase.message_id)
  return _internal_message_id();
}
inline void MessageInfoBase::_internal_set_message_id(int32_t value) {
  _has_bits_[0] |= 0x00000008u;
  message_id_ = value;
}
inline void MessageInfoBase::set_message_id(int32_t value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:ssp.MessageInfoBase.message_id)
}

// optional int32 publish_time = 4;
inline bool MessageInfoBase::_internal_has_publish_time() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool MessageInfoBase::has_publish_time() const {
  return _internal_has_publish_time();
}
inline void MessageInfoBase::clear_publish_time() {
  publish_time_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline int32_t MessageInfoBase::_internal_publish_time() const {
  return publish_time_;
}
inline int32_t MessageInfoBase::publish_time() const {
  // @@protoc_insertion_point(field_get:ssp.MessageInfoBase.publish_time)
  return _internal_publish_time();
}
inline void MessageInfoBase::_internal_set_publish_time(int32_t value) {
  _has_bits_[0] |= 0x00000010u;
  publish_time_ = value;
}
inline void MessageInfoBase::set_publish_time(int32_t value) {
  _internal_set_publish_time(value);
  // @@protoc_insertion_point(field_set:ssp.MessageInfoBase.publish_time)
}

// optional string content = 5;
inline bool MessageInfoBase::_internal_has_content() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool MessageInfoBase::has_content() const {
  return _internal_has_content();
}
inline void MessageInfoBase::clear_content() {
  content_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& MessageInfoBase::content() const {
  // @@protoc_insertion_point(field_get:ssp.MessageInfoBase.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MessageInfoBase::set_content(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:ssp.MessageInfoBase.content)
}
inline std::string* MessageInfoBase::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:ssp.MessageInfoBase.content)
  return _s;
}
inline const std::string& MessageInfoBase::_internal_content() const {
  return content_.Get();
}
inline void MessageInfoBase::_internal_set_content(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MessageInfoBase::_internal_mutable_content() {
  _has_bits_[0] |= 0x00000001u;
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MessageInfoBase::release_content() {
  // @@protoc_insertion_point(field_release:ssp.MessageInfoBase.content)
  if (!_internal_has_content()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  auto* p = content_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void MessageInfoBase::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ssp.MessageInfoBase.content)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace ssp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_5finfo_5fbase_2eproto
